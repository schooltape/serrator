/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of users
         * @description This allows you to search for users and get details about the user. The search filter attributes are all optional.
         *     The number of users returned is 5 by default, if the limit query parameter is not provided.
         *     This endpoint is only available to superusers to avoid leaking information about users to other users.
         *
         */
        get: operations["userSearch"];
        put?: never;
        /**
         * Create a user
         * @description This can be used to create a new user in the system.  This can only be completed by a superuser.
         *
         *     The minimum fields required to create a user are:
         *     ```
         *     "username": "rwhite",
         *     "role": {
         *       "id": 4
         *     },
         *     "campus": [
         *       {
         *         "id": 1
         *       }
         *     ],
         *     "firstName": "Rebecca"
         *     }
         *     ```
         *
         */
        post: operations["userPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/token/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get an authentication token for a user
         * @description Retrieve an authentication token for another user.
         *
         *     Only users which are authenticated as a superuser may request a token for
         *     another user.
         *
         */
        post: operations["userGetTokenForUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Get a user
         * @description Returns all the information about a specific user. The result from this API can be passed into the update user endpoint. This endpoint may only be used by the current user or superusers.
         *
         */
        get: operations["userGet"];
        /**
         * Update a user
         * @description This allows a user to be updated by passing in a user object. When using this endpoint you must provide the entire user, we recommend you get the user first via the "get a user" endpoint. This endpoint may only be used by superusers.
         *
         */
        put: operations["userPut"];
        post?: never;
        /**
         * Delete a user
         * @description This will soft-delete a user from the system.  A soft-deleted user will no longer be visible in the system, but the data will remain. This endpoint may only be used by superusers.
         *
         */
        delete: operations["userDelete"];
        options?: never;
        head?: never;
        /**
         * Partially update a user
         * @description This allows you to update specific fields of a user without needing to provide all the fields. By providing a partial user object, only the fields provided will be updated. The remaining fields will be left as they were. This endpoint may only be used by superusers.
         *
         */
        patch: operations["userPatch"];
        trace?: never;
    };
    "/api/user/{id}/group": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Get a users groups
         * @description This will provide a list of the groups a user is a member of.  It will include information about the group membership status and settings.  The endpoint is only available to superusers.
         *
         */
        get: operations["userGroupMembershipSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{id}/group/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
                groupId: number;
            };
            cookie?: never;
        };
        /**
         * Get a users settings for a group
         * @description This will provide you with the current enrolment settings the user has for a specific group. This endpoint is only available for superusers.
         *
         */
        get: operations["userGroupMembershipGet"];
        /**
         * Update a user's settings for a group
         * @description This allows you to change the group access level, notification and favourite status of a group for a particular user. The group membership for the user must already exist. The endpoint is only available for superusers.
         *
         */
        put: operations["userGroupMembershipPut"];
        /**
         * Add user to a group
         * @description This will add a user as a member into a group. This membership must not already exist. You will need to provide all the settings for the membership. This endpoint is only available for superusers.
         *
         */
        post: operations["userGroupMembershipPost"];
        /**
         * Remove this user from a group
         * @description This will remove the relationship between a user and a group, it will also remove any settings related to that group membership. The endpoint is only available for superusers.
         *
         */
        delete: operations["userGroupMembershipDelete"];
        options?: never;
        head?: never;
        /**
         * Partially update a user's group settings
         * @description This allows you to change only the group access level, notification and favourite status of a group for a particular user. You can use this endpoint to set one setting, leaving the other settings unchanged. The endpoint is only available for superusers.
         *
         */
        patch: operations["userGroupMembershipPatch"];
        trace?: never;
    };
    "/user/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an authentication token
         * @description Retrieve an authentication token for the user
         *
         *     This endpoint is intended so that in-browser API calls performed within
         *     a Schoolbox instance may be performed in a manner more in common with
         *     calls to a remote API.
         *
         *     This endpoint only makes sense for users authenticated with the "session"
         *     security scheme, as it returns a token which is used by the "bearerAuth"
         *     scheme.
         *
         */
        get: operations["userGetTokenForSelf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discussion/{contextType}/{contextId}/threads": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a thread */
        post: operations["createThread"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discussion/{contextType}/{contextId}/threads/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** Get a thread */
        get: operations["getThread"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discussion/{contextType}/{contextId}/threads/{id}/open": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        /** Enable a thread */
        put: operations["openThread"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discussion/{contextType}/{contextId}/threads/{id}/close": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        /** Disable a thread */
        put: operations["closeThread"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discussion/{contextType}/{contextId}/threads/{id}/comments": {
        parameters: {
            query?: {
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
            };
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** Get comments for a thread */
        get: operations["getCommentsByThread"];
        put?: never;
        /** Create a new comment */
        post: operations["createCommentInThread"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discussion/{contextType}/{contextId}/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a comment */
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discussion/{contextType}/{contextId}/comments/{id}/comments": {
        parameters: {
            query?: {
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
            };
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** Get replies to a comment */
        get: operations["getCommentsByParent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login using JWT param
         * @description Attempt to authenticate a user based on a JWT passed in the query string. Then returns a response with a session cookie.  This can be used to start a user session when the user only has a JWT.  The JWT may be a QR code, oAuth token or a user generated API key.
         *
         */
        get: operations["apiSessionGet"];
        put?: never;
        /**
         * Login to system
         * @description Attempt to authenticate a user based on either a username/password pair, or
         *     a JWT passed in form data. This is used to login the user to the system so they can continue.  It will effectively create a session cookie for the user.
         *
         */
        post: operations["apiSessionPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/register/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register mobile device
         * @description In order to register your app to receive push notifications you first need to notify Schoolbox of a valid user and the app identifier. This process is handled via a POST call as specified below.
         */
        post: operations["mobileRegister"];
        /**
         * Deregister mobile device
         * @description Removes a registered device from receiving push notifications.
         *
         */
        delete: operations["mobileDeregister"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/asyncUpload.php": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a file
         * @description Upload a file to Schoolbox's internal file storage system.
         *
         *     This file may then be referenced directly, or provided as an argument to
         *     another place which accepts file uploads.
         *
         */
        post: operations["storageAsyncUpload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/file/{fileId}/ajax": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update visibility of a file */
        patch: operations["filePatch"];
        trace?: never;
    };
    "/news/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a news article
         * @description Creates a new news article: the article's author will be the currently
         *     authenticated user.
         *
         *     The article is not necessarily published yet: this simply saves the article
         *     so that the user may refine it before publishing.
         *
         */
        post: operations["commsNews.postCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available news topics
         * @description Retrieve all available news topics, which may be attached to a news article.
         *
         */
        get: operations["commsNews.getTopics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a news article */
        get: operations["commsNews.getDetail"];
        put?: never;
        /**
         * Update a news article
         * @description Update an existing news article.
         *
         *     The article is not necessarily published yet: this simply saves the article
         *     so that the user may refine it before publishing.
         *
         */
        post: operations["commsNews.postUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/{id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a news article
         * @description Delete an existing news article.
         *
         */
        post: operations["commsNews.postDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/moderation/{id}/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change the publication status of a news article
         * @description Change the publication status of a news article.
         *
         */
        post: operations["commsNewsModeration.setStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/saved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of saved articles
         * @description Retrieve the IDs of all saved news articles for the authenticated user.
         *
         */
        get: operations["commsNewsSaveForLater.getList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/saved/{id}/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save an article for later
         * @description Save an article for the authenticated user.
         *
         *     This article will then be returned by the
         *     [Get list of saved articles](#get-/news/saved/)
         *     endpoint.
         *
         */
        post: operations["commsNewsSaveForLater.postAdd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/saved/{id}/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove an article from the saved for later list
         * @description Remove an article from the authenticated user's saved articles.
         *
         */
        post: operations["commsNewsSaveForLater.postRemove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/me/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get articles written by the authenticated user
         * @description Get the list of articles written by the currently authenticated user.
         *
         */
        get: operations["commsNews.getAuthoredArticles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/lists/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get articles audienced to the authenticated user
         * @description Get the list of articles audienced to the currently authenticated user.
         *
         */
        get: operations["commsNews.getListForIndex"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/feed/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * RSS feed of articles for a user
         * @description Get the articles for the user (identified by the `$key` parameter) as a RSS
         *     document.
         *
         *     This endpoint doesn't use the standard security schemes: instead, it relies
         *     upon the `$key` parameter remaining secret.
         *
         */
        get: operations["commsNewsFeed.getFeedForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/lists/folder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get articles audienced to the given folder
         * @description Get the list of articles audienced to the given folder.
         *
         */
        get: operations["commsNews.getListForHomepage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/ajax/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get full calendar events for a given user
         * @description Returns a list of calendar events for the user, including classes, pastoral care, ensembles, activities, due work, excursions, assemblies, and other scheduled items.
         *
         */
        get: operations["getCalendarAjaxFull"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a calendar event
         * @description Creates a calendar event
         *
         */
        post: operations["calendarEvent.postCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/{id}/modify": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Modify a calendar event
         * @description Modifies a calendar event
         *
         */
        post: operations["calendarEvent.postModify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/{id}/move": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move a calendar event
         * @description Moves a calendar event
         *
         */
        post: operations["calendarEvent.postMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/{id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a calendar event
         * @description Deletes a calendar event
         *
         */
        post: operations["calendarEvent.postDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/attendance/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an event's attendees
         * @description This will return a list of people that have been invited or RSVP to an an event.  It will include the status of their invitation and if they have accepted the invitation.
         *
         */
        get: operations["getCalendarEventAttendance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/attendance/{id}/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invite attendees to an event
         * @description Create invitations to the given event, for the given set of users.
         *
         */
        post: operations["postCalendarEventAttendanceCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/attendance/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept event invitation
         * @description This allows a user to accept an invitation.  Note that not all events will allow the user to accept an invitation.  They must either have been invited, or have the ability to invite themselves.
         *
         */
        post: operations["postCalendarEventAttendanceAccept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/attendance/{id}/decline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Decline event invitation
         * @description As the authenticated user, declines the invitation to attend the given
         *     event.
         *
         */
        post: operations["postCalendarEventAttendanceDecline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/event/attendance/{id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Uninvite attendees from an event
         * @description Deletes invitations to the given event, for the given user.
         *
         */
        post: operations["postCalendarEventAttendanceDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assessment": {
        parameters: {
            query: {
                /** @description URL-encoded JSON object consisting of fields and values to filter assessments on.
                 *
                 *     Example 1:
                 *
                 *     JSON filter: \
                 *     `{"dueDate":{"from":"2025-01-01T00:00:00+10:00"}}`
                 *
                 *     URL-encoded JSON filter: \
                 *     `%7B%22dueDate%22%3A%7B%22from%22%3A%222025-01-01T00%3A00%3A00%2B10%3A00%22%7D%7D`
                 *
                 *     Example 2:
                 *
                 *     JSON filter: \
                 *     `{"assessmentId":256,"title":"English 3/4 [Final]","assessmentType":"dueWork","folder":[{"id":80}],"weighted":false,"workType":{"id":1,"name":"Formative Assessment"},"dueDate":{"from":"2017-10-12T14:20:50+10:00","to":"2019-10-12T14:20:50+10:00"},"yearLevel":{"id":6,"name":"Year 6"}}`
                 *
                 *     URL-encoded JSON filter: \
                 *     `%7B%22assessmentId%22%3A256%2C%22title%22%3A%22English%203%2F4%20%5BFinal%5D%22%2C%22assessmentType%22%3A%22dueWork%22%2C%22folder%22%3A%5B%7B%22id%22%3A80%7D%5D%2C%22weighted%22%3Afalse%2C%22workType%22%3A%7B%22id%22%3A1%2C%22name%22%3A%22Formative%20Assessment%22%7D%2C%22dueDate%22%3A%7B%22from%22%3A%222017-10-12T14%3A20%3A50%2B10%3A00%22%2C%22to%22%3A%222019-10-12T14%3A20%3A50%2B10%3A00%22%7D%2C%22yearLevel%22%3A%7B%22id%22%3A6%2C%22name%22%3A%22Year%206%22%7D%7D`
                 *
                 *     --
                 *
                 *     The full URL to use either of the above examples will look like this: \
                 *     `[base URL]/api/assessment?filter=[URL-encoded JSON filter]`
                 *      */
                filter: {
                    /**
                     * @description The ID of the assessment to search.
                     *
                     * @example 256
                     */
                    assessmentId?: number;
                    /**
                     * @description A part of title to filter assessments on.
                     *
                     * @example English 3/4 [Final]
                     */
                    title?: string;
                    /**
                     * @description The type of assessments to filter on.
                     * @example dueWork
                     * @enum {string}
                     */
                    assessmentType?: "task" | "quiz" | "dueWork" | "LTI" | "project";
                    folder?: ({
                        /**
                         * @description ID of the folder containing the assessment.
                         * @example 80
                         */
                        id: number;
                    } | {
                        /**
                         * @description Code of the folder containing the assessment.
                         * @example 9ENGA
                         */
                        code: string;
                    })[] | {
                        /**
                         * @description ID of the folder containing the assessment.
                         * @example 80
                         */
                        id: number;
                    };
                    subjectCode?: string[];
                    /**
                     * @description Limit assessments to only those that have a weight set.
                     *
                     * @example false
                     */
                    weighted?: boolean;
                    /** @description Select either one of the following fields to filter on:
                     *      */
                    workType?: {
                        /**
                         * @description The DB identifier of the worktype.
                         * @example 1
                         */
                        id?: number;
                        /**
                         * @description The name of the work type, may not be unique.
                         * @example Formative Assessment
                         */
                        name?: string;
                    };
                    dueDate?: {
                        /**
                         * Format: date-time
                         * @description An RFC3339 time string including timezone eg. 2017-10-12T14:20:50+10:00
                         *
                         * @example 2017-10-12T14:20:50+10:00
                         */
                        from?: string;
                        /**
                         * Format: date-time
                         * @description An RFC3339 time string including timezone eg. 2017-10-12T14:20:50+10:00
                         *
                         * @example 2019-10-12T14:20:50+10:00
                         */
                        to?: string;
                    };
                    /** @description Select either one of the following fields to filter on year levels associated with folder:
                     *      */
                    yearLevel?: {
                        /**
                         * @description The db identifier of the yearlevel.
                         * @example 6
                         */
                        id?: number;
                        /**
                         * @description The name of the year level, may not be unique.
                         * @example Year 6
                         */
                        name?: string;
                    };
                    project?: {
                        /**
                         * @description ID of the parent assessment (project).
                         * @example 255
                         */
                        id?: number;
                    };
                };
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of assessments
         * @description This endpoint will return assessments and their results that match the filter provided.
         *     The number of assessments returned is 5 by default, if the limit query parameter is not provided.
         *     There is a maximum limit of 500 assessments per request.
         *     We strongly recommend the use of due date filters, to ensure you only get relevant assessments from the current period.
         *     For example a common request may be to get assessments of work type 'major' that are due in the current year.
         *
         *     The endpoint is only available to superusers.
         *
         */
        get: operations["assessmentSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assessment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Get an assessment
         * @description This will return all the information related to a specific assessment.  This will include the the assessment details and the results of all participants in that assessment.   The endpoint is only available to superusers.
         *
         */
        get: operations["assessmentGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/learning/assessments/{assessmentId}/{studentId}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create feedback for due work
         * @description Add marks and comments to an assessment. Can be draft or published based on the publish flag.
         *     Use the responseId to indicate the feedback is in relation to a student submission, this field is optional.
         *
         */
        post: operations["assessment.postFeedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/learning/assessments/{assessmentId}/{studentId}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create due work submission
         * @description Allow the uploading of a student submission to an assessment item for a particular student.
         *     If submitted by a user other than the student it will appear as submitted on behalf of.
         *     When attaching files they should first be uploaded, using the file upload endpoint, then the reference can be used in this payload.
         *     All fields are optional, but at least one field must be supplied.
         *
         */
        post: operations["assessment.postSubmission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{id}/notify": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a user notification
         * @description Send an instant notification to a selected user.  The endpoint is only available to superusers.
         *
         */
        post: operations["apiusernotify.apiUserNotify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/learning/evidence/user/{id}/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Learning moment for users
         * @description Share Learning Moment.
         *
         */
        post: operations["learningMomentEvidence.postMomentForUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/learning/evidence/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Learning Moment
         * @description Update Learning Moment
         *
         */
        put: operations["putEvidence"];
        post?: never;
        /**
         * Delete Learning Moment
         * @description Delete Learning Moment
         *
         */
        delete: operations["deleteEvidence"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/learning/evidenceFeed/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List the Learning Moments, Badges and Due Work feedback for the specified User
         * @description This endpoint will return a list of all evidence objects achieved or received by the user
         *     limited to a count of 10 items in reverse chronological order.
         *     When `cursor` query parameter is provided, it'll return 10 items from the item specified in the cursor.
         *
         *     #### Availability
         *     The types of items appear on the feed depend on available modules:
         *       * The Learning Moments: Learning Moment Module
         *       * Badges: Badge Module
         *       * Due Work Feedback: Grade Module
         *
         *     #### Permission
         *     This endpoint is permitted to:
         *     * Superusers
         *     * Users with a role of Staff role type
         *       * Requires Learning Moments role permission to see Learning Moments
         *       * Requires View Student Grades role permission to see Due Work feedback
         *     * Students for their own
         *     * Parent for their own and their child's
         *
         */
        get: operations["evidenceFeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pastoral/record/insert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new pastoral record
         * @description Creates a new pastoral record. The record's author will be the currently authenticated user.
         *     #### Availability
         *     This is accessible only when Pastoral module is enabled.
         *     #### Permission
         *     This endpoint is available for:
         *     * Users with Pastoral Moderator service permission
         *     * Users with a role of Staff role type with Access Pastoral Care permission
         *
         */
        post: operations["pastoral.postRecordInsert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pastoral/record/{id}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Partially update a pastoral record
         * @description Updates an existing pastoral record with a partial set of changes for brevity, such as updating a heading without needing to specify everything about the pastoral record explicitly.
         *     Only some fields are supported by this endpoint, described below. Any fields outside of this set are disregarded.
         *     Any fields omitted remain unchanged. Note that for updating Pastoral Actions you need to enable the config setting in admin.
         *
         *     #### Availability
         *     This is accessible only when Pastoral module is enabled.
         *     #### Permission
         *     This endpoint is available for:
         *     * Users with Pastoral Moderator service permission
         *     * Users with a role of Staff role type with Access Pastoral Care permission
         *
         */
        patch: operations["pastoral.patchRecordUpdate"];
        trace?: never;
    };
    "/api/curriculum/usage/{id}": {
        parameters: {
            query?: {
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Get curriculum node usage
         * @description Get curriculum node usage
         *
         */
        get: operations["curriculumApiUsage.getNodeUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of courses
         * @description This allows you to search for courses get details about the course. The search filter attributes are all optional.
         *     You may only set either **query** or **folder** at **_one time_**. If the limit query parameter is not provided, the
         *     number of courses returned is defaulted to 100. This endpoint is only available to superusers and staff
         *
         */
        get: operations["searchCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for content
         * @description Search for content
         *
         */
        get: operations["apiSearchGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/folder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for content within a folder
         * @description Search for content within a folder
         *
         */
        get: operations["apiSearchFolderGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/getData/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Get all users belonging to a group
         * @description This will provide a list of the users that belong to the specified group.  This endpoint is only available to superusers.
         *
         */
        get: operations["groupGetUsersInGroup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Cursor
         * @description A generated but decodable pointer to the first record to return.
         *
         *     Each endpoint whose data accepts a cursor will return a cursor that
         *     points to the next page of the result set.
         *
         */
        cursor: string;
        /**
         * Problem Details
         * @description Schema for RFC 7807 (Problem Details for HTTP APIs).
         */
        problem: {
            /**
             * Format: uri
             * @description A URI reference that identifies the problem type.
             * @default about:blank
             */
            type: string;
            /** @description A short human-readable summary of the problem type. */
            title: string;
            /**
             * Format: int32
             * @description The HTTP status code.
             * @example 503
             */
            status: number;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
        };
        /**
         * ID
         * Format: int32
         * @description Identifying ID number for most objects within Schoolbox
         */
        id: number;
        /**
         * Campus
         * @description A sub-division within the school.
         *
         *     All users within the school belong to one or more campuses:
         *     * a teacher may have classes across multiple campuses
         *     * a student will generally only attend one campus
         *     * a parent may have children who belong to different campuses
         *
         * @example {
         *       "id": 1,
         *       "name": "Secondary",
         *       "code": "SEC",
         *       "days": "5"
         *     }
         */
        campus: {
            id?: components["schemas"]["id"];
            /** @description The name of the campus. */
            name?: string;
            /** @description The identifying code for the campus in the school's SIS.
             *      */
            code?: string;
            /** @description The number of days in a cycle for this campus' timetable. */
            days?: string;
        };
        /**
         * Role
         * @description A type of user account at the school. Roles are generally used to group
         *     users by the type of position that they have at the school.
         *
         * @example {
         *       "id": 4,
         *       "name": "Senior Students",
         *       "type": "student"
         *     }
         */
        role: {
            id: components["schemas"]["id"];
            /** @description The name of the role. */
            name?: string;
            /**
             * @description The type of this role. Different role types have different levels of
             *     access to different parts of Schoolbox.
             *
             * @enum {string}
             */
            type?: "staff" | "student" | "parent" | "guest";
        };
        /**
         * School House
         * @description A school house which a student may belong to.
         *
         * @example {
         *       "id": 2,
         *       "name": "Prospect"
         *     }
         */
        schoolHouse: {
            id: components["schemas"]["id"];
            /** @description The name of the school house. */
            name?: string;
        } | null;
        /**
         * External ID
         * @description This user's ID in the school's School Information System (SIS).
         *
         *     This value is used to query the SIS for data that is stored in the SIS,
         *     in particular:
         *     * relationships with other users
         *     * class enrolments
         *     * timetabled classes
         *
         * @example 501
         */
        externalId: string | null;
        /**
         * Year Level
         * @description A year level which a student may belong to.
         *
         * @example {
         *       "id": 13,
         *       "name": "Year 12"
         *     }
         */
        yearLevel: {
            id: components["schemas"]["id"];
            /** @description The name of the year level. */
            name?: string;
        } | null;
        /**
         * User
         * @description Short fields for users
         */
        userShort: {
            id?: components["schemas"]["id"];
            externalId?: components["schemas"]["externalId"];
            /**
             * @description The user's title (Mr., Ms., etc.).
             * @example Ms
             */
            title?: string | null;
            /**
             * @description The user's first name.
             *
             *     Schoolbox doesn't distinguish between a person's actual first name
             *     and any other names, and in any case is not the definitive source of
             *     naming information; therefore in practice this will usually be the
             *     user's given name.
             *
             * @example Rebecca
             */
            firstName?: string;
            /** @description The user's preferred name. */
            preferredName?: string | null;
            /** @description The user's preferred name, if set. If preferred name is not set, returns the user's first name. */
            givenName?: string;
            /**
             * @description The user's surname.
             * @example White
             */
            lastName?: string | null;
            /**
             * @description The user's formatted full name.
             * @example Ms Rebecca White
             */
            fullName?: string;
            role?: components["schemas"]["role"];
            yearLevel?: components["schemas"]["yearLevel"];
        };
        /**
         * User
         * @description User with fields that are relevant when reading a user's value.
         *
         */
        "user-readableFields": {
            id?: components["schemas"]["id"];
            campus?: components["schemas"]["campus"][];
            role?: components["schemas"]["role"];
            /** @description This user's group memberships
             *      */
            groups?: {
                /**
                 * ID
                 * @description The ID of the user.
                 */
                id?: number;
                /**
                 * @description The name of the group.
                 *
                 *     In this context, this is the name of the group's folder.
                 *
                 * @example Basketball
                 */
                name?: string;
                /**
                 * @description The level of access that users have to this group.
                 *
                 *     * `private`: membership is by invitation only
                 *     * `moderated`: users may apply for membership, but must be approved
                 *     * `free`: users may join and leave at any time
                 *
                 * @enum {string}
                 */
                type?: "private" | "moderated" | "free";
                /**
                 * @description The level of subscription that is allowed to this group.
                 *
                 *     * `false`: users may subscribe to this group's events
                 *     * `true`: users must subscribe to this group's events, and may not
                 *       unsubscribe
                 *
                 * @example true
                 */
                isForceFollow?: boolean;
                /** @description Does the user have this group set as a favourite?
                 *      */
                isFavourite?: boolean;
                /** @description Is this user subscribed to this group's events? If so, they will be
                 *     notified when an event occurs.
                 *
                 *     Note that the group administrator may:
                 *     * Force Follow, so that users may not opt out of notifications
                 *     * Disable Notifications, so that users never receive notifications
                 *      */
                isNotificationsOn?: boolean;
                /**
                 * @description The enrolment status of the user for this group.
                 *
                 *     * `enroled`: the user is enroled in the group with the 'membership' permission
                 *     * `notEnroled`: the user is not enroled in the group
                 *     * `pending`: the user has requested to join the group and is currently
                 *       awaiting approval by a group admin
                 *
                 * @enum {string}
                 */
                enrolmentStatus?: "enroled" | "notEnroled" | "pending";
                /**
                 * @description The type of membership that this user has.
                 *
                 *     * `admin`: the user is the administrator of this group: they may add
                 *       and remove members, change the group's permissions and disband the
                 *       group
                 *     * `write`: the user may create content within the group
                 *     * `read`: the user may view content within the group, and may be
                 *       notified of and may participate in group events
                 *     * `none`: the user is not a member of the group
                 *
                 * @enum {string}
                 */
                membership?: "admin" | "write" | "read" | "none";
                _links?: {
                    /**
                     * Format: uri-reference
                     * @description Gives the homepage link to the group, or NULL if the group has no homepage.
                     *
                     * @example /homepage/83
                     */
                    homepage?: string | null;
                };
            }[];
            schoolHouse?: components["schemas"]["schoolHouse"];
            /**
             * @description This user's guardians. (Only applicable if this user is of role
             *     type: student.)
             *
             *     Guardians are not necessarily the same thing as parents: a guardian
             *     is not always the child's parent (e.g. they may be a foster parent
             *     or other relative), and a parent is not always the child's guardian
             *     (e.g. the family might have separated).
             *
             * @example [
             *       {
             *         "id": 25,
             *         "fullName": "Janna Reed",
             *         "yearLevel": [],
             *         "role": {
             *           "id": 3,
             *           "name": "Parent"
             *         }
             *       }
             *     ]
             */
            guardians?: components["schemas"]["userShort"][] | null;
            /**
             * @description This user's students. (Only applicable if this user is of role type:
             *     parent.)
             *
             *     Students are not necessarily the same thing as children, for the
             *     same reason that guardians are not the same thing as parents.
             *
             *     Generally, the guardian => student relation is symmetrical to the
             *     student => guardian relation.
             *
             * @example []
             */
            students?: components["schemas"]["userShort"][] | null;
            /**
             * @description The users whom this user may impersonate within a Schoolbox session.
             *
             *     This relation is asymmetric: A may impersonate B, but that does not
             *     imply that B may impersonate A.
             *
             * @example [
             *       {
             *         "id": 69,
             *         "externalId": 69,
             *         "title": null,
             *         "firstName": "Eden",
             *         "preferredName": "Reed",
             *         "givenName": "Eden",
             *         "lastName": "Reed",
             *         "fullName": "Eden Reed",
             *         "role": {
             *           "id": 5,
             *           "name": "Junior Student",
             *           "type": "student"
             *         },
             *         "yearLevel": {
             *           "id": 4,
             *           "name": "3"
             *         }
             *       }
             *     ]
             */
            impersonableUsers?: components["schemas"]["userShort"][];
            /**
             * Format: email
             * @description The user's email address for receiving communication from this
             *     Schoolbox instance, or its users.
             *
             *     This may be derived from the user's username and the instance's
             *     hostname (see isEmailDerived); if not, it may be set via the
             *     altEmail field.
             *
             */
            email?: string;
            _links?: {
                /** Format: uri-reference */
                profile?: string;
                /** Format: uri-reference */
                avatar?: string | null;
            };
            yearLevel?: components["schemas"]["yearLevel"];
            /**
             * @description Is this user deleted?
             * @default false
             */
            isDeleted: boolean;
            /**
             * @description The user's formatted full name.
             * @example Ms Rebecca White
             */
            fullName?: string | null;
        };
        "user-fields": {
            externalId?: components["schemas"]["externalId"];
            /**
             * @description The user's username. This will be used as the user's identification
             *     when they attempt to log into the Schoolbox instance.
             *
             * @example rwhite
             */
            username?: string;
            /**
             * @description Does this user have superuser permissions over the Schoolbox
             *     instance?
             *
             * @default false
             */
            superuser: boolean;
            /**
             * @description Is this user able to log in to the Schoolbox instance?
             * @default true
             */
            enabled: boolean;
            /**
             * @description The user's title (Mr., Ms., etc.).
             * @example Ms
             */
            title?: string | null;
            /**
             * @description The user's first name.
             *
             *     Schoolbox doesn't distinguish between a person's actual first name
             *     and any other names, and in any case is not the definitive source of
             *     naming information; therefore in practice this will usually be the
             *     user's given name.
             *
             * @example Rebecca
             */
            firstName?: string;
            /**
             * @description The user's surname.
             * @example White
             */
            lastName?: string | null;
            /** @description The user's preferred name. */
            preferredName?: string | null;
            /** @description Is this user's email address derived directly from their username
             *     and the host name of the Schoolbox instance?
             *      */
            isEmailDerived?: boolean;
            /**
             * Format: email
             * @description The user's email address, if it is not derived from their username
             *     and hostname.
             *
             * @example rwhite@example.com.au
             */
            altEmail?: string | null;
            /** @description The user's job or position title within the school which owns the
             *     Schoolbox instance.
             *      */
            positionTitle?: string | null;
            /** @description A set of flags which control the behavior of a user's Schoolbox
             *     session.
             *      */
            flags?: {
                /** @description Does this user's contacts get shown to other users? */
                showContacts?: boolean;
                /** @description Does this user get to see their timetabled classes? */
                enableTimetable?: boolean;
                /** @description Does the side navigation show for this user? */
                showSideNav?: boolean;
                /** @description Does the notifications panel show for this user? */
                showNotificationsPanel?: boolean;
                /** @description Does the grade graph show for this user? */
                showGradeGraph?: boolean;
                /**
                 * @description Is this user able to create ePortfolio content?
                 * @default false
                 */
                enableEportfolio: boolean;
                /**
                 * @description Does this user use Schoolbox's internal mail system to send
                 *     email?
                 *
                 *     If false, they use webmail instead.
                 *
                 * @default false
                 */
                useInternalMail: boolean;
                /**
                 * @description Which calendar view will the user default to?
                 * @default month
                 * @enum {string}
                 */
                calendarView: "month" | "agendaWeek" | "agendaDay" | "list";
            };
        };
        /** User */
        "user-read": components["schemas"]["user-readableFields"] & components["schemas"]["user-fields"];
        /**
         * List metadata
         * @description Metadata for lists of items retrieved
         */
        listMetadata: {
            /**
             * Format: int32
             * @description If provided, the number of items in the result set.
             */
            count?: number;
            cursor?: {
                /**
                 * Cursor
                 * @description If set, a cursor to the current page of results.
                 *     Seems redundant, but it does generate a cursor to a request
                 *     made without one.
                 *
                 */
                current: string | null;
                /**
                 * Cursor
                 * @description If set, a cursor to the next page of results.
                 */
                next: string | null;
            };
        };
        /**
         * User list
         * @description A list of users
         */
        "user-readList": {
            data?: components["schemas"]["user-read"][];
            metadata?: components["schemas"]["listMetadata"];
        };
        /**
         * Item relation
         * @description A relation to another item, consisting only of an ID.
         *
         *     Generally, this is used within request bodies for specifying that the
         *     item is to be related to another item, without implying that any
         *     properties of the related item are to be modified.
         *
         */
        itemRelation: {
            id: components["schemas"]["id"];
        };
        /**
         * Schoolbox User
         * @description Fields that are only relevant when writing a user's value.
         *
         */
        "user-writableFields": {
            campus?: components["schemas"]["itemRelation"][];
            role?: components["schemas"]["itemRelation"];
            schoolHouse?: components["schemas"]["itemRelation"];
            yearLevel?: components["schemas"]["itemRelation"];
            impersonableUser?: components["schemas"]["itemRelation"][] | null;
        };
        "user-write": components["schemas"]["user-writableFields"] & components["schemas"]["user-fields"];
        userToken: {
            /** @description A JSON Web Token (JWT) which authenticates the bearer as a particular
             *     user, and allows the bearer to perform API calls within the context of
             *     that user.
             *
             *     This token is passed to the Schoolbox API according to the "BearerAuth"
             *     security scheme (i.e. in a HTTP header `Authorization: Bearer $token`).
             *      */
            token?: string;
        };
        /** Writable Group Membership Fields */
        "userGroupMembership-writableFields": {
            /**
             * @description The type of membership that this user has.
             *
             *     * Admin: the user is the administrator of this group: they may add
             *       and remove members, change the group's permissions and disband the
             *       group
             *     * Write: the user may create content within the group
             *     * Read: the user may view content within the group, and may be
             *       notified of and may participate in group events
             *
             * @enum {string}
             */
            membership: "admin" | "write" | "read";
            /**
             * @description The enrolment status of the user for this group.
             *
             *     * Enroled: the user is enroled in the group with the 'membership' permission
             *     * Pending: the user has requested to join the group and is currently
             *       awaiting approval by a group admin
             *
             * @default enroled
             * @enum {string}
             */
            enrolmentStatus: "enroled" | "pending";
            /** @description Is this user subscribed to this group's events? If so, they will be
             *     notified when an event occurs.
             *
             *     Note that the group administrator may:
             *     * force Follow, so that users may not opt out of notifications
             *     * disable Notifications, so that users never receive notifications
             *      */
            isNotificationsOn: boolean;
            /** @description Does the user have this group set as a favourite
             *      */
            isFavourite: boolean;
        };
        /**
         * Datetime
         * Format: date-time
         * @description The date as a RFC3339 string. eg. "2018-01-28T00:00:00+11:00".
         * @example 2018-01-28T00:00:00+11:00
         */
        dateTimeString: string;
        /**
         * Link
         * @description A JSON representation of a link to content within Schoolbox.
         *     For compatibility with existing code, can be defined as either:
         *     * a URI string
         *     * an object, which contains a URI string and an `auth` boolean value
         *
         */
        link: string | {
            /** Format: uri */
            href: string;
            /** @description Is the currently authenticated user authorized to view the resource
             *     pointed to by `href`?
             *
             *     If this value is `null`, then it is not known whether the user may
             *     view this resource.
             *      */
            auth?: boolean | null;
        };
        /**
         * Comment list
         * @description A list of comments
         */
        "discussionComment-readList": {
            data?: {
                /** @description The ID of this comment. */
                id?: number;
                /** @description The author of this comment. */
                author?: {
                    /** @description The ID of this user. */
                    id?: number;
                    externalId?: components["schemas"]["externalId"];
                    /** @description The user's title (Mr., Ms., etc.). */
                    title?: string | null;
                    /** @description The user's first name. */
                    firstname?: string | null;
                    /** @description The user's full name. */
                    fullName?: string | null;
                    /** @description The user's given name. */
                    givenName?: string | null;
                    /** @description The user's last name. */
                    lastname?: string | null;
                    /** @description The user's preferred name. */
                    preferredName?: string | null;
                    _links?: {
                        avatar?: {
                            auth?: string | null;
                            /** Format: uri */
                            href?: string | null;
                        };
                        profile?: {
                            auth?: string | null;
                            /** Format: uri */
                            href?: string | null;
                        };
                    };
                };
                content?: string;
                createdAt?: components["schemas"]["dateTimeString"];
                updatedAt?: components["schemas"]["dateTimeString"];
            }[];
            metadata?: components["schemas"]["listMetadata"];
        };
        /**
         * Thread
         * @description Common fields for discussion threads.
         */
        "discussionThread-read": {
            id?: components["schemas"]["id"];
            /** @description Is the thread open for further comments? */
            open?: boolean;
            createdAt?: components["schemas"]["dateTimeString"];
            updatedAt?: components["schemas"]["dateTimeString"];
            _links?: {
                getComments?: components["schemas"]["link"] & unknown;
                createComment?: components["schemas"]["link"] & unknown;
            };
            /** @description A list of direct child comments of this thread. */
            children?: components["schemas"]["discussionComment-readList"];
        };
        /** @description Username/Password */
        "authentication-usernamePassword": {
            /** @description The username which identifies the user who logged into the device. */
            username: string;
            /** @description The password which authenticates the user who logged into the device. */
            password: string;
        };
        /** @description JWT */
        "authentication-jwt": {
            /** @description A JWT generated via an oAuth request. */
            jwt: string;
        };
        /** @description Mobile App Registration */
        "registration-base": {
            /** @description A unique string used to identify the user on the device.
             *
             *     Ignored if using the Digistorm provider: otherwise, if not
             *     provided no device will be registered.
             *      */
            token?: string;
            /** @description A unique string to identify the app's identity.
             *      */
            appId: string;
            /** @description An optional unique string to identify the device identity.
             *
             *     Stored but not used if using the Digistorm provider: otherwise,
             *     this is normally not provided or is the same as the app ID due
             *     to limitations enforced by device makers.
             *      */
            deviceId?: string;
        };
        "registration-usernamePassword": components["schemas"]["authentication-usernamePassword"] & components["schemas"]["registration-base"];
        "registration-jwt": components["schemas"]["authentication-jwt"] & components["schemas"]["registration-base"];
        /** @description A description of how a file is stored in Schoolbox's internal file storage,
         *     and of how it may be retrieved.
         *      */
        file: {
            /** @description The location of the file in the file store.
             *      */
            hash?: string;
            /** @description The name with which the file was uploaded.
             *      */
            name?: string;
            /** @description The mimetype of the uploaded file.
             *      */
            mime?: string;
            /**
             * @description The type of the uploaded file.
             *
             * @enum {string}
             */
            type?: "image" | "video" | "audio" | "document" | "other";
            /** @description The uploaded file's size, in bytes.
             *      */
            size?: number;
            /** @description Relevant links for the file.
             *      */
            _links?: {
                /**
                 * Format: uri
                 * @description An icon for the file's mimetype.
                 *
                 */
                icon?: string;
                /**
                 * Format: uri
                 * @description An image URL for the file (if it's an image).
                 *
                 */
                image?: string;
                /**
                 * Format: uri
                 * @description A stream URL for the file (if it's audio or video).
                 *
                 */
                stream?: string;
                /**
                 * Format: uri
                 * @description A poster URL for the file (if it's a video).
                 *
                 */
                poster?: string;
            };
        };
        /** @description News article body, as raw HTML. */
        body: string;
        /** @description A pointer to a file within Schoolbox, in the format:
         *     `$locator:$location:$filename`
         *
         *     The variables within the pointer have this meaning:
         *     * `$locator` represents the strategy for finding the file:
         *       * `store` for files uploaded to Schoolbox's storage
         *       * `browse` finds files in Schoolbox's resource browser
         *       * `myfile` finds files in a Schoolbox user's My Files browser
         *       * `office365` finds files in an Office365 store
         *     * `$location` is the location of the file within `$locator`:
         *       * for `store` this is a file's unique hash
         *       * for `browse` and `myfile` this is a file ID
         *       * for `office365` this is the file's unique node
         *     * `$filename` is the filename that the file will be given once it is uploaded
         *       to wherever it is being uploaded
         *
         *     See the [Upload a file](#post-/storage/asyncUpload.php)
         *     endpoint for details on how to upload a file, and receive a file
         *     pointer from that upload.
         *      */
        filePointer: string;
        /** @description A base-64 encoded URL to redirect to, once processing of the entity on this
         *     page is completed.
         *      */
        returnUrl: string;
        /** @description A topic which may be applicable to a news article.
         *      */
        topic: {
            id?: components["schemas"]["id"];
            /** @description A human-readable name for the topic.
             *      */
            name?: string;
            /** @description A machine-readable name for the topic.
             *      */
            slug?: string;
            /** @description The order in which this topic will display in a topic list.
             *      */
            sequence?: number;
        };
        commonFields: {
            id?: components["schemas"]["id"];
            /** @description News article title. */
            title?: string;
            /** @description News article displayed blurb, as raw HTML.
             *
             *     This is derived from the article's blurb (if any) and body:
             *     * the blurb is used in full, if provided
             *     * if not, the body is trimmed
             *      */
            blurb?: string;
            /** @description Feature image of this article.
             *      */
            featureImage?: {
                /** @description The mimetype of the image file.
                 *      */
                mime?: string;
                /** @description The size of the image file in bytes.
                 *      */
                size?: number;
                /** @description Relevant links for the file.
                 *      */
                _links?: {
                    image?: {
                        auth?: boolean | null;
                        /**
                         * Format: uri
                         * @description A URL for the file storage.
                         *
                         */
                        href?: string;
                    };
                };
            } | null;
            publishAt?: unknown & components["schemas"]["dateTimeString"];
            /** @description A list of topics which are applicable to the article.
             *      */
            topics?: {
                /** @description A human-readable name for the topic.
                 *      */
                name?: string;
                /** @description A machine-readable name for the topic.
                 *      */
                slug?: string;
            }[];
        };
        /** @description The author's details.
         *      */
        author: {
            id?: components["schemas"]["id"];
            externalId?: components["schemas"]["externalId"];
            /** @description The author's first name (a.k.a. given name).
             *      */
            firstname?: string;
            /** @description The author's last name (a.k.a. surname).
             *      */
            lastname?: string;
            /** @description The author's title.
             *      */
            title?: string;
            /** @description The author's full name: usually, this is the title, first name and last
             *     name joined together.
             *      */
            fullname?: string;
            preferredName?: string | null;
            givenName?: string;
        };
        /** @description A human-readable representation of the article's current
         *     status.
         *
         *     * `Drafted`: the article is a draft only
         *     * `Awaiting Moderation`: the article has been submitted
         *       for approval, but is not yet approved or rejected
         *     * `Awaiting Publication`: the article has been approved
         *       for publishing, but its publish date has not been
         *       reached yet
         *     * `Rejected`: the article has been rejected for
         *       publishing
         *     * `Published`: the article has been published
         *     * `Archived`: the article has expired; whilst it is no
         *       longer published, it is still readable in the archive
         *      */
        status: string;
        statusDate: unknown & components["schemas"]["dateTimeString"];
        /** @description Is this article sticky?
         *
         *     If so, it will always display at the top of the list of
         *     articles.
         *      */
        sticky: boolean;
        links: {
            saveForLater?: components["schemas"]["link"] & unknown;
            unsaveForLater?: components["schemas"]["link"] & unknown;
            self?: components["schemas"]["link"] & unknown;
            update?: components["schemas"]["link"] & unknown;
        };
        /** @description The author's details: currently, only their name.
         *      */
        authorNameOnly: {
            /** @description The author's full name.
             *      */
            fullname?: string;
        };
        readMore: {
            /** @description The text to show in this article's "read more" link,
             *     if any.
             *      */
            string?: string;
            /** @description Is there a "read more" link?
             *
             *     It is only available if the "read more" link
             *     configuration is not empty, and the article has one or
             *     more of:
             *     * a feature image
             *     * a discussion thread
             *     * a body
             *      */
            available?: boolean;
        };
        /**
         * @description A truthy integer value (0 or 1).
         *
         *     0 evaluates to false; 1 evaluates to true.
         *
         * @default 0
         * @enum {integer}
         */
        queryBoolean: 0 | 1;
        eventAjaxData: {
            meta?: {
                /** @description Unique identifier for the event. */
                eventId?: number;
                /**
                 * @description Human-readable time range for the event.
                 * @example 9:00am–9:00pm
                 */
                time?: string;
                /** @description Title of the event. */
                title?: string;
                /** @description More details about the event. */
                detail?: string;
                /** @description Location name or description. */
                location?: string;
                eventType?: string;
                variant?: string;
                /**
                 * @description Event category or type.
                 * @example Sport
                 */
                type?: string;
                author?: string;
                authorId?: number;
                level?: string;
                /** @description Whether the event is completed. */
                completed?: boolean;
                /** @description Name of the folder associated with the event. */
                folderName?: string;
                /** @description ID of the folder associated with the event. */
                folderId?: number;
                workType?: string;
                /** @description ID of the work type. */
                workTypeId?: number;
                weighted?: number;
                /**
                 * @description Assessment type.
                 * @example project
                 */
                assessmentType?: string;
                /** @description Colour associated with the event. */
                colour?: string | null;
                /** @description Whether the event is editable. */
                editable?: boolean;
            };
            links?: {
                category?: {
                    id?: number;
                    name?: string;
                };
                path?: string;
            };
            styles?: {
                /** @description Whether the event is visible. */
                visible?: boolean;
            };
            attendance?: {
                icon?: boolean;
                status?: boolean;
                requestButton?: boolean;
                listButton?: boolean;
            };
            custom?: {
                modifyLink?: boolean;
                moreDetailsLink?: string;
            };
            timetable?: {
                code?: string;
                staff?: {
                    [key: string]: string;
                };
            };
        };
        eventAjax: {
            resourceId?: string | null;
            /** @description The event title. */
            title?: string;
            /** @description Start time or date of the event (ISO 8601). */
            start?: string;
            /** @description End time or date of the event (ISO 8601). */
            end?: string;
            /** @description Whether the event is editable by the user. */
            editable?: boolean;
            /** @description Whether the event lasts all day. */
            allDay?: boolean;
            /**
             * @description Hex code for the event color.
             * @example #ff7537
             */
            color?: string;
            className?: string;
            /** @description Additional data related to the event. */
            data?: components["schemas"]["eventAjaxData"];
        }[];
        eventCommonProps: {
            /**
             * @description Whether the event is an all day event.
             * @example false
             */
            allDay?: boolean;
            /**
             * @description Whether the requested change should apply only to the event with the given 'id', or to all events in the series of which event 'id' is a member.
             * @example self
             * @enum {string}
             */
            efficacy?: "self" | "series";
            /**
             * @description Title of event.
             * @example The Yalta Conference
             */
            title?: string;
            /**
             * Format: date-time
             * @description Start date and time of event in RFC3339 format.
             * @example 2024-03-05T19:00:00+10:00
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description End date and time of event in RFC3339 format.
             * @example 2024-03-05T19:30:00+10:00
             */
            endDate?: string;
            /**
             * @description Blank for single event.
             * @example weekly
             * @enum {string}
             */
            repeat?: "" | "daily" | "weekly" | "fortnightly" | "monthly" | "yearly";
            /**
             * Format: date
             * @description Date event repeats until, in either YYYY-MM-DD as well as DD/MM/YYYY formats.
             * @example 2024-04-05
             */
            repeat_until?: string;
            /**
             * @description Location name or description.
             * @example Meeting room 1
             */
            location?: string;
            /**
             * @description More details about event.
             * @example Meeting to discuss things
             */
            detail?: string;
            /**
             * Format: date-time
             * @description Date and time at which the event becomes public in RFC3339 format.
             * @example 2024-03-05T19:30:00+10:00
             */
            publishDate?: string;
            /**
             * @description Event level ID.  1 for Personal, 2 for Group, 3 for Campus.
             * @example 2
             * @enum {integer}
             */
            level?: 1 | 2 | 3;
            /**
             * @description Integer representing the type of attendance that is enabled. 0 means 'None', 1 means 'Invitation Only', and 2 means 'Open'.
             * @example 2
             * @enum {integer}
             */
            attendance?: 0 | 1 | 2;
            /**
             * @description The maximum number of guests who may attend this event.  Null means no maximum.
             * @example 5
             */
            maxAttendees?: number | null;
            /**
             * @description Whether the list of attendees will show visible to guests.
             * @example false
             */
            showAttendees?: boolean;
        };
        eventRequestFieldsForModify: {
            /** @description An object stub for specifying an author. When an event is created, if this is not supplied the logged-in user will become the author. */
            author?: {
                id?: components["schemas"]["id"];
            };
            /** @description Type as an object stub. */
            type?: {
                id?: components["schemas"]["id"];
            };
            /**
             * @description Array of role object stubs.
             * @example [
             *       {
             *         "id": 123
             *       },
             *       {
             *         "id": 456
             *       }
             *     ]
             */
            roles?: {
                id?: components["schemas"]["id"];
            }[];
            /**
             * @description Array of campus object stubs.  Required when creating campus-level events.
             * @example [
             *       {
             *         "id": 123
             *       },
             *       {
             *         "id": 456
             *       }
             *     ]
             */
            campuses?: {
                id?: components["schemas"]["id"];
            }[];
            /**
             * @description Array of folder object stubs.  These specify the groups that should see the event (for group-level events).  Required when creating group-level events.
             * @example [
             *       {
             *         "id": 123
             *       },
             *       {
             *         "id": 456
             *       }
             *     ]
             */
            folders?: {
                id?: components["schemas"]["id"];
            }[];
            /**
             * @description Array of user object stubs.
             * @example [
             *       {
             *         "id": 123
             *       },
             *       {
             *         "id": 456
             *       }
             *     ]
             */
            guests?: {
                id?: components["schemas"]["id"];
            }[];
        } & components["schemas"]["eventCommonProps"];
        eventRequestFieldsForCreate: {
            /** @description An object stub for specifying a user.  This specifies the owner of the event. When an event is created, if this is not supplied the logged-in user will become the owner.  Note the owner may not be changed after event creation. */
            user?: {
                id?: components["schemas"]["id"];
            };
        } & (Record<string, never> & components["schemas"]["eventRequestFieldsForModify"]);
        /**
         * Folder
         * @example {
         *       "id": 83,
         *       "name": "9A English",
         *       "title": "9A English (9ENGA)",
         *       "codes": [
         *         "9ENGA"
         *       ],
         *       "parent": {
         *         "id": 2
         *       },
         *       "_links": {
         *         "view": "\\/homepage\\/83"
         *       }
         *     }
         */
        folderLinkOnly: {
            id?: components["schemas"]["id"];
            /** @description The name of the Folder. */
            name?: string;
            /** @description The name of the folder with any class codes appended in brackets. */
            title?: string;
            /** @description Schoolbox Class Codes
             *      */
            codes?: string;
            /** @description Parent folder object stub. */
            parent?: {
                id?: components["schemas"]["id"];
            };
            /** @description Object containing names as keys and URLs as values */
            _links?: Record<string, never>;
        };
        eventResponseFields: {
            id?: components["schemas"]["id"];
            user?: components["schemas"]["userShort"];
            author?: components["schemas"]["userShort"];
            /** @description Type as an object. */
            type?: {
                id?: components["schemas"]["id"];
                /**
                 * @description Name of event type
                 * @example Excursion
                 */
                type?: string;
                /**
                 * @description CSS colour string
                 * @example #ff7537
                 */
                color?: string;
            };
            /** @description Array of role objects */
            roles?: components["schemas"]["role"][];
            /** @description Array of campus objects */
            campuses?: components["schemas"]["campus"][];
            /** @description Array of folder objects */
            folders?: components["schemas"]["folderLinkOnly"][];
            /** @description Array of user objects */
            guests?: components["schemas"]["userShort"][];
        } & components["schemas"]["eventCommonProps"];
        /** @description The status of the user's attendance.
         *
         *     * null: user is not invited to this event
         *     * 1: user has not yet responded to the invitation
         *     * 2: user has accepted the invitation
         *     * 3: user has declined the invitation
         *      */
        calendarAttendanceStatus: number | null;
        /**
         * Calendar event attendance
         * @description A record of the invitees to a calendar event, and whether or not they are
         *     attending.
         *
         */
        calendarAttendance: {
            /** @description The level of attendance which applies to this event.
             *
             *     * 0: event may not be attended (usually, this means that no users will be
             *        invited to this event; however, it is possible for an event's
             *        attendance level to change)
             *     * 1: event attendees may only be invited by the event's creator
             *     * 2: any user who may view the event may invite themselves to the event
             *      */
            level?: number;
            currentUser?: {
                user?: components["schemas"]["userShort"];
                status?: components["schemas"]["calendarAttendanceStatus"];
                /** @description Can the authenticated user modify the event?
                 *      */
                canModify?: boolean;
                /** @description Can the authenticated user invite other users to the event?
                 *      */
                canInvite?: boolean;
            };
            /** @description A summary of all the invitees of this event.
             *      */
            attendees?: {
                /** @description A list of the event's invitees.
                 *
                 *     Not all events have public invitation lists: if this is the case, then
                 *     the guest list is hidden from all but the event's creator.
                 *      */
                guests?: {
                    /** @description The invitee's ID number.
                     *      */
                    id?: number;
                    /** @description The invitee's full name.
                     *      */
                    name?: string;
                    status?: components["schemas"]["calendarAttendanceStatus"];
                }[];
                /** @description The maximum number of invitees to this event, or null if there is no
                 *     maximum.
                 *      */
                max?: number | null;
                /** @description The current total number of invitees to this event.
                 *
                 *     This may differ from the number of guests in the guest list, due to
                 *     the ability to create events with private invitation lists.
                 *      */
                num?: number;
                /** @description The number of available invite slots for this event.
                 *      */
                available?: number | null;
                /** @description The number of invitees for this event whose invitation is pending
                 *     response.
                 *      */
                pending?: number;
                /** @description The number of invitees for this event whose invitation has been
                 *     accepted.
                 *      */
                accepted?: number;
                /** @description The number of invitees for this event whose invitation has been
                 *     declined.
                 *      */
                declined?: number;
            };
        };
        /**
         * An Assessment Rubric item
         * @description An Assessment Rubric item.
         */
        "assessment-rubric": {
            /** @description The area that you are assessing. */
            capabilities?: {
                /**
                 * @description The ID in the DB of this field. To help identify different rubric capabilities.
                 * @example 47
                 */
                id?: number;
                /**
                 * @description The description of the capability.
                 * @example Skills
                 */
                name?: string;
                /**
                 * @description By default, the maximum points for the capability is the sum of the highest descriptor values available in each indicator within that capability.
                 *
                 * @example 0
                 */
                maxValue?: number;
                /** @description The key skills that you will be assessing in the assessment. */
                indicators?: {
                    /**
                     * @description The ID in the DB of this field. To help identify different rubric indicators.
                     * @example 105
                     */
                    id?: number;
                    /**
                     * @description The description of the indicator.
                     * @example Communication
                     *
                     */
                    name?: string;
                    /**
                     * @description By default, the maximum points for the indicator is the sum of the highest descriptor values available within the indicator.
                     *
                     * @example 0
                     */
                    maxValue?: number;
                    /** @description Statement that explain what a student has achieved or demonstrated for this level. */
                    descriptors?: {
                        /**
                         * @description The ID in the DB of this field. To help identify different rubric descriptors.
                         * @example 620
                         */
                        id?: number;
                        /**
                         * @description The description of the descriptor.
                         * @example Developing in reading appropriate materials and writing on-topic.
                         *
                         */
                        description?: string;
                        /**
                         * @description If you are using the mark range, this will be the upper point value available for that particular descriptor.
                         *
                         * @example 0
                         */
                        maxValue?: number;
                        /**
                         * @description The order the descriptors are ordered in.
                         * @example 4
                         */
                        sequence?: number;
                    }[];
                }[];
            }[];
        };
        /** User */
        "assessment-user": {
            id?: components["schemas"]["id"];
            /**
             * @description The user's title (Mr., Ms., etc.).
             * @example Ms
             */
            title?: string | null;
            /**
             * @description The user's first name.
             *
             *     Schoolbox doesn't distinguish between a person's actual first name
             *     and any other names, and in any case is not the definitive source of
             *     naming information; therefore in practice this will usually be the
             *     user's given name.
             *
             * @example Rebecca
             */
            firstName?: string;
            /** @description The user's preferred name. */
            preferredName?: string | null;
            /**
             * @description The user's surname.
             * @example White
             */
            lastName?: string | null;
            externalId?: components["schemas"]["externalId"];
        };
        /**
         * An Assessment Rubric item
         * @description An Assessment Rubric item.
         */
        "assessment-rubric-feedback": {
            /** @description The area that was assessed. */
            capabilities?: {
                /**
                 * @description The ID in the DB of this field. To help identify different rubric capabilities.
                 * @example 47
                 */
                id?: number;
                /**
                 * @description The description of the capability.
                 * @example Skills
                 */
                name?: string;
                /**
                 * @description By default, the maximum points for the capability is the sum of the highest descriptor values available in each indicator within that capability.
                 *
                 * @example 0
                 */
                maxValue?: number;
                /**
                 * @description The marked value for this capability.
                 * @example 0
                 */
                value?: number;
                /**
                 * @description The human readable mark for this capability.
                 * @example null
                 */
                mark?: string | null;
                /** @description The key skills that was assessed in the assessment. */
                indicators?: {
                    /**
                     * @description The ID in the DB of this field. To help identify different rubric indicators.
                     * @example 105
                     */
                    id?: number;
                    /**
                     * @description The description of the indicator.
                     * @example Communication
                     *
                     */
                    name?: string;
                    /**
                     * @description By default, the maximum points for the indicator is the sum of the highest descriptor values available within the indicator.
                     *
                     * @example 0
                     */
                    maxValue?: number;
                    /**
                     * @description The marked value for this indicator.
                     * @example 0
                     */
                    value?: number;
                    /** @description Statement that explain what a student has achieved or demonstrated for this level. */
                    descriptor?: {
                        /**
                         * @description The ID in the DB of this field. To help identify different rubric descriptors.
                         * @example 628
                         */
                        id?: number;
                        /**
                         * @description The description of the descriptor.
                         * @example Mostly listening, speaking on topic, reading appropriate materials, writing on-topic & using critical non-verbal communication.
                         *
                         */
                        description?: string;
                        /**
                         * @description If you are using the mark range, this will be the upper point value available for that particular descriptor.
                         *
                         * @example 0
                         */
                        maxValue?: number;
                        /**
                         * @description The order the descriptor was ordered in.
                         * @example 4
                         */
                        sequence?: number;
                    };
                }[];
            }[];
        };
        /**
         * An Assessment participation item
         * @description An Assessment participation item.
         */
        "assessment-participation-item": {
            learner?: components["schemas"]["assessment-user"] & unknown;
            /** @description The most recent response given by (or for) the participant. */
            response?: {
                id?: components["schemas"]["id"];
                /**
                 * Format: date-time
                 * @description The date as a RFC3339 string.
                 *
                 * @example 2022-01-30T21:00:00.000Z
                 */
                date?: string;
                /** @description Any files which were attached as part of the participant's response.
                 *      */
                files?: components["schemas"]["file"][];
                submitter?: components["schemas"]["assessment-user"] & unknown;
            };
            /** @description The most recent feedback given for the participant. */
            feedback?: {
                id?: components["schemas"]["id"];
                /**
                 * @description The teacher's feedback for the student.
                 * @example Joffrey,
                 *     Your introduction was very strong, but you did not use the previous feedback, which reminded you to add evidence.
                 *     Please consider this for your next essay.
                 *
                 */
                comment?: string;
                /**
                 * Format: date-time
                 * @description The date as a RFC3339 string.
                 *
                 * @example 2022-01-30T21:00:00.000Z
                 */
                date?: string;
                /**
                 * @description A human readable mark.
                 * @example A
                 */
                mark?: string;
                /**
                 * Format: float
                 * @description The mark in numeric form.
                 * @example 36
                 */
                normalisedMark?: number;
                rubric?: components["schemas"]["assessment-rubric-feedback"];
                instructor?: components["schemas"]["assessment-user"] & unknown;
            };
            /**
             * @deprecated
             * @description The teacher's feedback for the student.
             *     (Deprecated: moved to the `feedback` object.)
             *
             */
            comment?: string;
            /**
             * Format: date-time
             * @deprecated
             * @description The date as a RFC3339 string.
             *     (Deprecated: moved to the `feedback` object.)
             *
             */
            date?: string;
            /**
             * @deprecated
             * @description A human readable mark.
             *     (Deprecated: moved to the `feedback` object.)
             *
             */
            mark?: string;
            /**
             * @deprecated
             * @description The mark in numeric form.
             *     (Deprecated: moved to the `feedback` object.)
             *
             */
            normalisedMark?: number;
            rubric?: components["schemas"]["assessment-rubric-feedback"] & unknown;
            instructor?: components["schemas"]["assessment-user"] & unknown;
        };
        /**
         * an Assessment Item
         * @description An assessment item.
         */
        "assessment-item": {
            id?: components["schemas"]["id"];
            /** @example Turning on the computer */
            title?: string;
            /**
             * @example task
             * @enum {string}
             */
            assessmentType?: "dueWork" | "quiz" | "task" | "project" | "LTI" | "lessonPlan";
            /** @description The folder where the assessment is found.
             *      */
            folder?: {
                /** @description The ID of the folder. */
                id?: number;
                /** @description The name of the folder. */
                name?: string;
                /** @description Class Codes associated with the folder. */
                code?: (string | null) | string[];
                /** @description Year levels which the folder is associated with.
                 *      */
                yearLevel?: {
                    id?: components["schemas"]["id"];
                    /** @description The name of the year level. */
                    name?: string;
                }[] | null;
            };
            /** @description The Course Subject Code
             *      */
            subjectCode?: string | null;
            /** @description Only applicable for assessmentType 'dueWork' (so value will be null for other assessmentTypes).
             *      */
            commonAssessment?: boolean | null;
            /** @description System configurable in your Admin Lists Work Types area.
             *     Not applicable to assessmentType 'lessonPlan' (so value will be null in that case).
             *      */
            workType?: {
                /**
                 * @description The DB identifier of the worktype.
                 * @example 1
                 */
                id?: number;
                /**
                 * @description The name of the work type, may not be unique.
                 * @example Formative Assessment
                 */
                name?: string;
            } | null;
            /**
             * @description The value of how much this assessment's outcome contributes to the final overall grade -
             *     a value of 0 indicates this assessment has no impact on the overall grade.
             *     Generally, this is a number between 0 and 100.
             *     Not applicable to assessmentTypes 'lessonPlan' and 'task' (so value will be null in those cases).
             *
             * @example 30
             */
            weight?: number | null;
            /**
             * Format: date-time
             * @description The due date of the assessment as a RFC3339 string. This can be null for assessments in a course.
             *
             * @example 2022-01-30T21:00:00.000Z
             */
            dueDate?: string | null;
            rubric?: components["schemas"]["assessment-rubric"];
            project?: {
                /**
                 * @description ID of the parent assessment (project).
                 * @example 255
                 */
                id?: number;
            } | null;
            /** @description Not applicable to assessmentType 'lessonPlan' (so value will be null in that case). */
            participants?: components["schemas"]["assessment-participation-item"][] | null;
        };
        /**
         * Assessment list
         * @description A list of assessments
         */
        "assessment-list": {
            data?: components["schemas"]["assessment-item"][];
            metadata?: components["schemas"]["listMetadata"];
        };
        /**
         * a Curriculum Code
         * @description A Curriculm Code
         */
        curriculumItem: {
            id?: components["schemas"]["id"];
            /** @example Self-awareness */
            name?: string;
            /** @example GCPSC-SEA */
            code?: string;
        };
        /**
         * A learning moment item
         * @description A learning moment item
         */
        evidenceItem: {
            id?: components["schemas"]["id"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            updatedAt?: string;
            /** @description The content of the Learning Moment
             *      */
            body?: string;
            creator?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                _links?: {
                    /** @example /search/user/2 */
                    profile?: string;
                    /** @example /portrait.php?id=2&size=square64 */
                    avatar?: string;
                };
                /** @example false */
                isDeleted?: boolean;
            };
            recipient?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                _links?: {
                    /** @example /search/user/2 */
                    profile?: string;
                    /** @example /portrait.php?id=2&size=square64 */
                    avatar?: string;
                };
                /** @example false */
                isDeleted?: boolean;
            };
            discussionThread?: components["schemas"]["discussionThread-read"];
            filename?: string | null;
            storage?: {
                /** @example 966fb6fbd7bdf8c442fb421d816b1ff8a7d6a23c */
                hash?: string | null;
                /** @example image/jpeg */
                mime?: string | null;
                /** @example image */
                type?: string | null;
                /** @example 3385989 */
                size?: number | null;
                /** @description Will contain one of the following depending on what file type is attached
                 *      */
                _links?: {
                    /** @example /static/images/mime/application-image-jpg.svg */
                    icon?: string;
                    /** @example /storage/image.php?hash=966fb6fbd7bdf8c442fb421d816b1ff8a7d6a23c */
                    image?: string;
                    stream?: string;
                    poster?: string;
                    /** @example /storage/fetch.php?hash=966fb6fbd7bdf8c442fb421d816b1ff8a7d6a23c */
                    fetch?: string;
                } | null;
            } | null;
            curriculumNodes?: components["schemas"]["curriculumItem"][] | null;
            /** @description System configurable in your Admin Lists Learning Moment area
             *      */
            tags?: {
                /**
                 * @description the DB identifier of the Learning Moment Tags
                 * @example 1
                 */
                id?: number;
                /**
                 * @description the name of the Learning Moment type, may not be unique
                 * @example Class Work
                 */
                name?: string;
            } | null;
            _links?: {
                /** @example /discussion/evidence/7/threads */
                createThread?: string;
                /** @example /learning/evidence/7 */
                delete?: string;
                /** @example /learning/evidence/7 */
                detail?: string;
                /** @example /learning/evidence/7/modify */
                modifyForm?: string;
                /** @example /learning/evidence/7 */
                put?: string;
            };
        };
        /** Evidence */
        evidenceList: {
            /**
             * @description evidence - discriminator for Evidence object
             * @example evidence
             */
            discriminator: string;
            object?: components["schemas"]["evidenceItem"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            date?: string;
        };
        /**
         * badge
         * @description A Badge item
         */
        badgeItem: {
            id?: components["schemas"]["id"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            createdAt?: string;
            createdBy?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                _links?: {
                    /** @example /search/user/2 */
                    profile?: string;
                    /** @example /portrait.php?id=2&size=square64 */
                    avatar?: string;
                };
                /** @example false */
                isDeleted?: boolean;
            };
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            updatedAt?: string;
            updatedBy?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                _links?: {
                    /** @example /search/user/2 */
                    profile?: string;
                    /** @example /portrait.php?id=2&size=square64 */
                    avatar?: string;
                };
                /** @example false */
                isDeleted?: boolean;
            };
            /** @example Jump Rope for Heart Team
             *      */
            name?: string;
            /** @description The content of the Learning Moment
             *      */
            body?: string;
            image?: string | null;
            /**
             * @description The Badge Image, either system defined or selectable by the user
             *
             * @example /images/badges/sport/23.svg
             *
             */
            icon?: string;
            /** @example true */
            allowAsGoal?: boolean;
            /**
             * @description On First load of the achieved badge, should the badge be animated? flying stars, fly in...
             *
             * @example true
             */
            animate?: boolean;
            category?: {
                /** @example 4 */
                id?: number;
                /** @example Extra-Curricular
                 *      */
                name?: string;
            };
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example null
             */
            achievementExpiry?: string | null;
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example null
             */
            goalExpiry?: string | null;
            curriculumNodes?: components["schemas"]["curriculumItem"][] | null;
            /**
             * @description System configurable in your Admin Lists Learning Moment area
             *
             * @example null
             */
            tags?: {
                /**
                 * @description the DB identifier of the Learning Moment Tags
                 * @example 1
                 */
                id?: number;
                /**
                 * @description the name of the Learning Moment type, may not be unique
                 * @example Class Work
                 */
                name?: string;
            } | null;
            _links?: {
                /**
                 * @description the link for the user to update the badge
                 *
                 * @example /learning/badge/10/update
                 */
                update?: string;
                /**
                 * @description the link for the user to delete the badge
                 *
                 * @example /learning/badge/10
                 */
                delete?: string;
                /** @example /learning/badge/award/10/achievement/recipients */
                achievementRecipients?: string;
                /** @example /learning/badge/award/10/goal/recipients */
                goalRecipients?: string;
                /** @example /learning/badge/award/10/achievement/withdraw */
                achievementWithdraw?: string;
                /** @example /learning/badge/award/10/goal/withdraw */
                goalWithdraw?: string;
                /**
                 * @description The Badge Image, either system defined or selectable by the user
                 *
                 * @example /static/images/badges/sport/23.svg
                 */
                icon?: string;
            };
        };
        /**
         * A badgeAward item
         * @description A Badge Award item
         */
        badgeAwardItem: {
            id?: components["schemas"]["id"];
            badge?: components["schemas"]["badgeItem"];
            /**
             * @example goal
             * @enum {string}
             */
            status?: "goal" | "achievement";
            /** @example I saw it with my own eyes! */
            reason?: string;
            /** @example true */
            isGoal?: boolean;
            award?: components["schemas"]["badgeAwardItem"];
            recipient?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                _links?: {
                    /** @example /search/user/2 */
                    profile?: string;
                    /** @example /portrait.php?id=2&size=square64 */
                    avatar?: string;
                };
                /** @example false */
                isDeleted?: boolean;
            };
            awardedBy?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                _links?: {
                    /** @example /search/user/2 */
                    profile?: string;
                    /** @example /portrait.php?id=2&size=square64 */
                    avatar?: string;
                };
                /** @example false */
                isDeleted?: boolean;
            };
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-27T12:49:11+10:00
             */
            awardedAt?: string;
            reasonedBy?: components["schemas"]["userShort"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-27T12:49:11+10:00
             */
            reasonedAt?: string | null;
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example null
             */
            expiresAt?: string | null;
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example null
             */
            viewedOn?: string | null;
            _links?: {
                /** @example /learning/badge/award/10/achievement/withdraw */
                achievementWithdraw?: string;
                /** @example /learning/badge/award/10/goal/withdraw */
                goalWithdraw?: string;
                /** @example /learning/badge/award/10/achievement */
                goalAward?: string;
                /** @example /learning/badge/award/8/update */
                awardUpdate?: string;
            };
        };
        /** Badge */
        badgeAwardList: {
            /**
             * @description badgeAward - discriminator for Badge award object
             * @example badgeAward
             */
            discriminator: string;
            object?: components["schemas"]["badgeAwardItem"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            date?: string;
        };
        /**
         * A dueWorkFeedback item
         * @description A Due Work Feedback item
         */
        dueWorkFeedbackItem: {
            id?: components["schemas"]["id"];
            /**
             * @description The mark in its original form.  For example this could be a letter grade or a percentage or a rubric.
             * @example A
             */
            mark?: string;
            /**
             * Format: float
             * @deprecated
             * @description The mark in numeric form
             * @example 85
             */
            normalisedMark?: number;
            /**
             * @description A string intended to correspond to a css class that represents a numeric value visually, if possible. Returns null if there's no corresponding colour visualisation, including when it's disabled via admin.
             * @example 5
             */
            gradientMark?: string | null;
            /** @description Comments about the work or the mark, by the user who assessed the work and gave the mark. */
            comment?: string;
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            publishedAt?: string;
            instructor?: components["schemas"]["userShort"];
            assessment?: {
                id?: components["schemas"]["id"];
                /**
                 * @description The title of the assessment.
                 * @example Evaluate your Approaches to Learning
                 */
                title?: string;
                /**
                 * Format: date-time
                 * @description The date on which the assessment was published, as a RFC3339 string.
                 *
                 * @example 2022-08-30T10:09:09+10:00
                 */
                publishedAt?: string;
                /**
                 * Format: date-time
                 * @description The earliest date on which the assessment may be started, as a RFC3339 string.
                 *
                 * @example 2022-08-30T10:09:09+10:00
                 */
                openAt?: string;
                /**
                 * Format: date-time
                 * @description The date on which the assessment is due, as a RFC3339 string.
                 *
                 * @example 2022-08-30T10:09:09+10:00
                 */
                dueAt?: string;
                /**
                 * Format: date-time
                 * @description The latest date on which the assessment may be submitted, as a RFC3339 string.
                 *
                 * @example 2022-08-30T10:09:09+10:00
                 */
                closeAt?: string;
                /**
                 * @description The weight given to this assessment for the purpose of calculating an overall grade.
                 * @example 25
                 */
                weight?: number;
                /**
                 * @description The number determines the order in which the assessment is intended to be completed, relative to other assessments.
                 * @example 5
                 */
                sequence?: number;
                /**
                 * @description The type of work involved in this assessment.
                 * @example Formative Assessment Task
                 */
                workType?: string;
                /**
                 * folderId
                 * Format: int32
                 * @description The ID of the folder to which this assessment belongs.
                 */
                folderId?: number;
                /**
                 * @description The name of the folder to which this assessment belongs.
                 * @example 3IH
                 */
                folderName?: string;
            };
            _links?: {
                /** @example /learning/assessments/150/69 */
                summary?: string;
            };
        };
        /** Due Work Feedback */
        dueWorkFeedbackList: {
            /**
             * @description dueWorkFeedback - discriminator for Due Work Feedback object
             * @example dueWorkFeedback
             */
            discriminator: string;
            object?: components["schemas"]["dueWorkFeedbackItem"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             * @example 2022-08-30T10:09:09+10:00
             */
            date?: string;
        };
        /**
         * Comment
         * @description Common fields for discussion comments.
         */
        "discussionComment-read": {
            id: components["schemas"]["id"];
            thread?: components["schemas"]["discussionThread-read"];
            author: components["schemas"]["user-read"];
            content: string;
            createdAt?: components["schemas"]["dateTimeString"];
            updatedAt?: components["schemas"]["dateTimeString"];
            parent?: components["schemas"]["discussionComment-read"];
            /** @description A list of direct children of this comment. */
            children?: components["schemas"]["discussionComment-readList"];
            /** @description Which role types may view this comment? If not set, assume all role
             *     types may view it.
             *     This is likely to be replaced with a more sophisticated visibility
             *     system, which encompasses individual roles, role types, folders,
             *     and who knows what else?
             *      */
            visibility?: ("staff" | "parent" | "student")[];
        };
        /**
         * User
         * @description Short fields for users
         */
        userAuthor: {
            id?: components["schemas"]["id"];
            /**
             * @description The user's title (Mr., Ms., etc.).
             * @example Ms
             */
            title?: string | null;
            /**
             * @description The user's first name.
             *
             *     Schoolbox doesn't distinguish between a person's actual first name
             *     and any other names, and in any case is not the definitive source of
             *     naming information; therefore in practice this will usually be the
             *     user's given name.
             *
             * @example Rebecca
             */
            firstName?: string;
            /** @description The user's preferred name. */
            preferredName?: string | null;
            /**
             * @description The user's surname.
             * @example White
             */
            lastName?: string | null;
            /** @description The user's formatted full name. */
            fullName?: string;
            /** @description Whether the user is deleted or not. */
            isDeleted?: boolean;
        };
        /**
         * a Pastoral Record
         * @description A pastoral record.
         */
        "pastoral-item": {
            id?: components["schemas"]["id"];
            /** @description The ID of SIS data corresponding to this pastoral record, if External Pastoral Synchronisation is ON. */
            externalId?: string | null;
            /**
             * User
             * @description Short fields for users
             */
            student?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                /** @description The user's preferred name. */
                preferredName?: string | null;
                _links?: {
                    /** Format: uri-reference */
                    profile?: string;
                    /** Format: uri-reference */
                    avatar?: string | null;
                };
            };
            /** @description Heading of the pastoral record. */
            heading?: string;
            /** @description Type of the pastoral record. */
            type?: {
                /** @description The ID of the pastoral type associated to this pastoral record. */
                id?: number;
                /** @description The name of the pastoral type. */
                name?: string;
                /** @description The name of the icon associated to the pastoral type. */
                icon?: string;
                /** @description The colour of the icon associated to the pastoral type. */
                colour?: string;
                sentiment?: string;
                /** @description The order in which this pastoral type will display in a pastoral type list. */
                sequence?: number;
            };
            /** @description Sub-type of the pastoral record. */
            subType?: {
                /** @description The ID of the pastoral sub-type associated to this pastoral record. */
                id?: number;
                /** @description The name of the pastoral sub-type. */
                name?: string;
                /** @description The name of the icon associated to the pastoral sub-type. */
                icon?: string;
                /** @description The colour of the icon associated to the pastoral sub-type. */
                colour?: string;
                sentiment?: string;
                /** @description The order in which this pastoral sub-type will display in a pastoral sub-type list. */
                sequence?: number;
            };
            /** @description Severity of the pastoral record. */
            severity?: {
                /** @description The ID of the pastoral severity of this pastoral record. */
                id?: number;
                /** @description The name of the pastoral severity. */
                name?: string;
                /** @description The colour associated to the pastoral severity. */
                color?: string;
                /** @description The order in which this pastoral severity will display in a pastoral severity list. */
                sequence?: number;
            };
            /**
             * Format: date-time
             * @description The date on which this is occurred as a RFC3339 string.
             */
            occurredOn?: string;
            /** @description Points of this pastoral record. */
            points?: number | null;
            /** @description List of tag names. */
            tags?: {
                /** @description The ID of the pastoral tag. */
                id?: number;
                /** @description The name of the pastoral tag. */
                name?: string;
            }[];
            /** @description General content of this pastoral record in raw HTML.
             *      */
            bodyPublic?: string;
            /** @description Confidential content of this pastoral record in raw HTML.
             *      */
            bodyPrivate?: string;
            /** @description Files attached to General content.
             *      */
            attachmentsPublic?: components["schemas"]["file"][];
            /** @description Files attached to Confidential content.
             *      */
            attachmentsPrivate?: components["schemas"]["file"][];
            /** @description General comments.
             *      */
            commentsPublic?: components["schemas"]["discussionComment-read"][];
            /** @description Confidential comments
             *      */
            commentsPrivate?: components["schemas"]["discussionComment-read"][];
            /** @description An array of pastoral actions. */
            recordActions?: {
                /** @description The ID of the pastoral action. */
                id?: number;
                /** @description The name of the pastoral action. */
                name?: string;
                /** @description Whether the action is completed. */
                completed?: boolean;
                /**
                 * Format: date-time
                 * @description The last modified date of the action as a RFC3339 string.
                 */
                updatedAt?: string;
                updatedBy?: components["schemas"]["userAuthor"];
            }[] | null;
            createdBy?: components["schemas"]["userAuthor"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             */
            createdAt?: string;
            updatedBy?: components["schemas"]["userAuthor"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             */
            updatedAt?: string;
            _links?: Record<string, never>;
        }[];
        /**
         * a partial Pastoral Record
         * @description A partial pastoral record.
         */
        "pastoral-partial-item": {
            id?: components["schemas"]["id"];
            /** @description The ID of SIS data corresponding to this pastoral record, if External Pastoral Synchronisation is ON. */
            externalId?: string | null;
            /**
             * User
             * @description Short fields for users
             */
            student?: {
                id?: components["schemas"]["id"];
                externalId?: components["schemas"]["externalId"];
                /**
                 * @description The user's title (Mr., Ms., etc.).
                 * @example Ms
                 */
                title?: string | null;
                /**
                 * @description The user's first name.
                 *
                 *     Schoolbox doesn't distinguish between a person's actual first name
                 *     and any other names, and in any case is not the definitive source of
                 *     naming information; therefore in practice this will usually be the
                 *     user's given name.
                 *
                 * @example Rebecca
                 */
                firstName?: string | null;
                /**
                 * @description The user's surname.
                 * @example White
                 */
                lastName?: string | null;
                /** @description The user's preferred name. */
                preferredName?: string | null;
                _links?: {
                    /** Format: uri-reference */
                    profile?: string;
                    /** Format: uri-reference */
                    avatar?: string | null;
                };
            };
            /** @description Heading of the pastoral record. */
            heading?: string;
            /** @description Type of the pastoral record. */
            type?: {
                /** @description The ID of the pastoral type associated to this pastoral record. */
                id?: number;
                /** @description The name of the pastoral type. */
                name?: string;
                /** @description The name of the icon associated to the pastoral type. */
                icon?: string;
                /** @description The colour of the icon associated to the pastoral type. */
                colour?: string;
                sentiment?: string;
                /** @description The order in which this pastoral type will display in a pastoral type list. */
                sequence?: number;
            };
            /** @description Sub-type of the pastoral record. */
            subType?: {
                /** @description The ID of the pastoral sub-type associated to this pastoral record. */
                id?: number;
                /** @description The name of the pastoral sub-type. */
                name?: string;
                /** @description The name of the icon associated to the pastoral sub-type. */
                icon?: string;
                /** @description The colour of the icon associated to the pastoral sub-type. */
                colour?: string;
                sentiment?: string;
                /** @description The order in which this pastoral sub-type will display in a pastoral sub-type list. */
                sequence?: number;
            };
            /** @description Severity of the pastoral record. */
            severity?: {
                /** @description The ID of the pastoral severity of this pastoral record. */
                id?: number;
                /** @description The name of the pastoral severity. */
                name?: string;
                /** @description The colour associated to the pastoral severity. */
                color?: string;
                /** @description The order in which this pastoral severity will display in a pastoral severity list. */
                sequence?: number;
            };
            /**
             * Format: date-time
             * @description The date on which this is occurred as a RFC3339 string.
             */
            occurredOn?: string;
            /** @description Points of this pastoral record. */
            points?: number | null;
            /** @description List of tag names. */
            tags?: {
                /** @description The ID of the pastoral tag. */
                id?: number;
                /** @description The name of the pastoral tag. */
                name?: string;
            }[];
            /** @description General content of this pastoral record in raw HTML.
             *      */
            bodyPublic?: string;
            /** @description Confidential content of this pastoral record in raw HTML.
             *      */
            bodyPrivate?: string;
            /** @description Files attached to General content.
             *      */
            attachmentsPublic?: components["schemas"]["file"][];
            /** @description Files attached to Confidential content.
             *      */
            attachmentsPrivate?: components["schemas"]["file"][];
            /** @description General comments.
             *      */
            commentsPublic?: components["schemas"]["discussionComment-read"][];
            /** @description Confidential comments
             *      */
            commentsPrivate?: components["schemas"]["discussionComment-read"][];
            /** @description An array of pastoral actions. */
            recordActions?: {
                /** @description The ID of the pastoral action. */
                id?: number;
                /** @description The name of the pastoral action. */
                name?: string;
                /** @description Whether the action is completed. */
                completed?: boolean;
                /**
                 * Format: date-time
                 * @description The last modified date of the action as a RFC3339 string.
                 */
                updatedAt?: string;
                updatedBy?: components["schemas"]["userAuthor"];
            }[] | null;
            createdBy?: components["schemas"]["userAuthor"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             */
            createdAt?: string;
            updatedBy?: components["schemas"]["userAuthor"];
            /**
             * Format: date-time
             * @description The date as a RFC3339 string.
             *
             */
            updatedAt?: string;
            _links?: Record<string, never>;
        }[];
        /**
         * A folder usage
         * @description A folder usage
         */
        "curriculumNodeUsage-folderItem": {
            /** @enum {string} */
            discriminator?: "folder";
            object?: {
                id?: components["schemas"]["id"];
                /** @description The name of the folder. */
                name?: string;
                /** @description The name of the folder, including any class codes. */
                title?: string;
                /** @description A list of class codes (if any) associated with this folder. */
                codes?: string[];
                _links?: {
                    /**
                     * Format: uri-reference
                     * @description A link to the homepage for this folder.
                     */
                    view?: string;
                };
            };
        };
        /**
         * A course usage
         * @description A course usage
         */
        "curriculumNodeUsage-courseItem": {
            /** @enum {string} */
            discriminator?: "course";
            object?: {
                id?: components["schemas"]["id"];
                /** @description The name of the course. */
                title?: string;
                /** @description The course's subject code. */
                subjectCode?: string;
                /** @description The course's framework ID */
                frameworkId?: number | null;
                folder?: components["schemas"]["curriculumNodeUsage-folderItem"];
                _links?: {
                    /**
                     * Format: uri-reference
                     * @description A link to view this course: contains a modify form.
                     *
                     */
                    view?: string;
                    /**
                     * Format: uri-reference
                     * @description A link to delete this course
                     *
                     */
                    delete?: string;
                };
            };
        };
        /**
         * A unit usage
         * @description A unit usage
         */
        "curriculumNodeUsage-unitItem": {
            /** @enum {string} */
            discriminator?: "unit";
            object?: {
                id?: components["schemas"]["id"];
                /** @description The name of the unit. */
                title?: string;
                folder?: components["schemas"]["curriculumNodeUsage-folderItem"];
                course?: components["schemas"]["curriculumNodeUsage-courseItem"];
                _links?: {
                    /**
                     * Format: uri-reference
                     * @description A link to view this unit's course: contains a modify form.
                     *
                     */
                    view?: string;
                };
            };
        };
        /**
         * An assessment usage
         * @description An assessment usage.
         *
         *     This only includes assessments which are within a unit specification.
         *
         */
        "curriculumNodeUsage-assessmentItem": {
            /** @enum {string} */
            discriminator?: "assessment";
            object?: {
                id?: components["schemas"]["id"];
                /** @description The name of the assessment. */
                title?: string;
                /**
                 * @description The type of the assessment.
                 * @enum {string}
                 */
                type?: "dueWork" | "project" | "lti" | "quiz" | "task" | "lessonPlan";
                unit?: components["schemas"]["curriculumNodeUsage-unitItem"];
                project?: {
                    id?: components["schemas"]["id"];
                    /**
                     * @description The type of the project: always "project".
                     *
                     * @enum {string}
                     */
                    type?: "project";
                    /** @description The name of the project. */
                    title?: string;
                    _links?: {
                        /**
                         * Format: uri-reference
                         * @description A link to view this project: contains a modify form.
                         *
                         */
                        view?: string;
                    };
                };
                _links?: {
                    /**
                     * Format: uri-reference
                     * @description A link to view this assessment: contains a modify form.
                     *
                     */
                    view?: string;
                };
            };
        };
        /**
         * A badge usage
         * @description A badge usage.
         *
         */
        "curriculumNodeUsage-badgeItem": {
            /** @enum {string} */
            discriminator?: "badge";
            object?: {
                id?: components["schemas"]["id"];
                /** @description The name of the badge. */
                title?: string;
                /** @description The name of the badge category. */
                category?: string;
                /** @description Either the user uploaded or selected badge banner image */
                icon?: string;
                /** @description A list of year levels (if any) associated with this badge. */
                yearLevel?: string[];
                object?: components["schemas"]["badgeItem"];
            };
        };
        "curriculumNodeUsage-list": {
            data?: (components["schemas"]["curriculumNodeUsage-folderItem"] | components["schemas"]["curriculumNodeUsage-courseItem"] | components["schemas"]["curriculumNodeUsage-unitItem"] | components["schemas"]["curriculumNodeUsage-assessmentItem"] | components["schemas"]["curriculumNodeUsage-badgeItem"])[];
            metadata?: components["schemas"]["listMetadata"];
        };
        /**
         * A curriculum node
         * @description A curriculum node
         */
        courseFolderCurriculumItem: unknown[] | null;
        /**
         * A course folder
         * @description A course folder
         */
        courseFolderItem: {
            id?: components["schemas"]["id"];
            /** @description The name of the folder. */
            name?: string;
            /** @description The name of the folder, including any class codes. */
            title?: string;
            /** @description A list of class codes (if any) associated with this folder. */
            codes?: string[];
            curriculumNodes?: components["schemas"]["courseFolderCurriculumItem"];
            parent?: components["schemas"]["courseFolderItem"];
            _links?: {
                /**
                 * Format: uri-reference
                 * @description A link to the homepage for this folder.
                 */
                view?: string;
            };
        } | null;
        /**
         * A Course item
         * @description A Course item
         */
        courseItem: unknown[];
        "course-list": {
            data?: unknown[];
            metadata?: components["schemas"]["listMetadata"];
        };
        /**
         * Folder
         * @example {
         *       "id": 80,
         *       "name": "9A English",
         *       "code": "9ENGA",
         *       "yearLevel": {
         *         "id": 9,
         *         "name": "Year 10"
         *       }
         *     }
         */
        folder: {
            id?: components["schemas"]["id"];
            /** @description The name of the Folder. */
            name?: string;
            /** @description Schoolbox Class Codes
             *      */
            code?: string;
            /**
             * Year Level
             * @description Year level(s) which the folder is associated to.
             *
             */
            readonly yearLevel?: {
                id: components["schemas"]["id"];
                /** @description The name of the year level. */
                name?: string;
            } | null;
        };
        common: {
            id: components["schemas"]["id"];
            /** @description The type of search result.
             *      */
            type: string;
            /**
             * Format: date-time
             * @description The date of the search result.
             *
             * @example 2022-01-30T21:00:00Z
             */
            date?: string | null;
            /**
             * Format: uri
             * @description A link to the search result.
             *
             */
            url: string;
            /** @description The title of the search result.
             *
             *     Intended to be used as the content of the main link to the search result.
             *      */
            title: string;
            /** @description An optional brief line of context for the search result.
             *
             *     Intended to be displayed directly underneath the title, in order to
             *     quickly describe the result.
             *      */
            meta?: string | null;
            /**
             * Format: uri
             * @description A link to an image to display next to this search result.
             *
             *     If not provided: this result's `type` should be used to determine an icon
             *     to display next to the result.
             *
             */
            image?: string | null;
            /** @description An optional further description of the search result.
             *
             *     Intended to be displayed beneath the main link to the search result,
             *     and to provide further context for the search user.
             *
             *     For example: for a news article, this may be a truncated version of the
             *     article, cut so that it contains a match on the search keyword.
             *      */
            description?: string | null;
            creator?: (Record<string, never> | null) & components["schemas"]["userAuthor"];
            /** @description An optional list of folders which point to this search result.
             *
             *     This list will be ordered from the top-most folder down to the folder in
             *     which the search result actually exists, but does not need to contain the
             *     entire folder hierarchy.
             *      */
            context?: (components["schemas"]["folder"] & {
                /**
                 * Format: uri
                 * @description A link to this folder.
                 *
                 */
                url?: string;
            })[];
            /** @description The name of an icon to display next to this search result.
             *
             *     Intended as a fallback, if the search result does not have an associated
             *     image URL.
             *      */
            icon?: string;
            /** @description A set of supplementary contextual links for this search result, for
             *     actions which the search user may perform on or for that result.
             *      */
            _links?: Record<string, never>;
        };
        badge: components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "badge";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "badge";
        };
        event: components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "event";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "event";
        };
        news: components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "news";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "news";
        };
        assessment: components["schemas"]["common"] & {
            /**
             * @description The type for this assessment. Assessments are sub-typed according to
             *     their assessment type:
             *
             *     - assessment.dueWork: this is a due work
             *     - assessment.lessonPlan: this is a lesson plan
             *     - assessment.lti: this is an LTI assessment
             *     - assessment.project: this is a project
             *       (activities within the project are not fetched)
             *     - assessment.task: this is a task
             *     - assessment.quiz: this is a quiz
             *
             * @enum {unknown}
             */
            type?: "assessment.dueWork" | "assessment.lessonPlan" | "assessment.lti" | "assessment.project" | "assessment.task" | "assessment.quiz";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "assessment.dueWork" | "assessment.lessonPlan" | "assessment.lti" | "assessment.project" | "assessment.task" | "assessment.quiz";
        };
        blog: components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "blog";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "blog";
        };
        "result-file": components["schemas"]["common"] & {
            /**
             * @description The type for this file. Files are sub-typed according to their
             *     classification:
             *
             *     - file.audio: audio files
             *     - file.document: text and other documents
             *     - file.image: images
             *     - file.video: videos
             *     - file.other: any type of file which doesn't fit one of the above
             *
             * @enum {unknown}
             */
            type?: "file.audio" | "file.document" | "file.image" | "file.video" | "file.other";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file.audio" | "file.document" | "file.image" | "file.video" | "file.other";
        };
        forum: components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "forum";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "forum";
        };
        "result-link": components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "link";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "link";
        };
        textBox: components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "textBox";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "textBox";
        };
        tile: components["schemas"]["common"] & {
            /** @enum {unknown} */
            type?: "tile";
            _links?: {
                /**
                 * Format: uri
                 * @description The target URL of the tile, if there is one.
                 *
                 *     (The result URL points to the tile's location within the page.)
                 *
                 */
                target?: string;
            };
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tile";
        };
        /**
         * Page search sub-result
         * @description A single search result within this page.
         *
         */
        "pageSubResult-item": components["schemas"]["assessment"] | components["schemas"]["blog"] | components["schemas"]["result-file"] | components["schemas"]["forum"] | components["schemas"]["result-link"] | components["schemas"]["textBox"] | components["schemas"]["tile"];
        /**
         * Page search sub-result list
         * @description A list of search results found within this page.
         *
         */
        "pageSubResult-list": {
            data?: components["schemas"]["pageSubResult-item"][];
            metadata?: components["schemas"]["listMetadata"];
        };
        page: components["schemas"]["common"] & {
            /**
             * @description The type for this page. Pages are sub-typed according to their class
             *     or homepage status:
             *
             *     - page.class: this is a page with a class attached
             *     - page.course: this is a page with a course specification attached
             *     - page.unit: this is a page with a unit specification attached
             *     - page.homepage: this is a page with neither a class, course or unit,
             *       but which still has a homepage
             *     - page.other: this is a folder which has no homepage
             *
             * @enum {unknown}
             */
            type?: "page.class" | "page.course" | "page.unit" | "page.homepage" | "page.other";
            _links?: {
                /**
                 * Format: uri
                 * @description A link for retrieving search results within this page.
                 *
                 *     This link does not contain a cursor: use the cursor within
                 *     `_subResults.metadata.cursor.next` to find the next page of
                 *     results.
                 *
                 */
                subResults?: string;
            };
            _subResults?: components["schemas"]["pageSubResult-list"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "page.class" | "page.course" | "page.unit" | "page.homepage" | "page.other";
        };
        user: components["schemas"]["common"] & {
            /**
             * @description The type of this user. (Users are subtyped by role type.)
             *
             *     - user.guest: this is a guest user
             *     - user.parent: this is a parent user
             *     - user.staff: this is a staff user
             *     - user.student: this is a student user
             *
             * @enum {unknown}
             */
            type?: "user.guest" | "user.parent" | "user.staff" | "user.student";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user.guest" | "user.parent" | "user.staff" | "user.student";
        };
        /**
         * Search result
         * @description A single search result.
         *
         *     This contains only search results which are not contained within a page:
         *     pages contain their own list of sub-results.
         *
         */
        "result-item": components["schemas"]["badge"] | components["schemas"]["event"] | components["schemas"]["news"] | components["schemas"]["page"] | components["schemas"]["user"];
        /**
         * Search result list
         * @description A list of search results
         */
        "result-list": {
            data?: components["schemas"]["result-item"][];
            metadata?: components["schemas"]["listMetadata"];
        };
    };
    responses: {
        /** @description The response that the API returns if it was unable or unwilling to fulfill a
         *     request.
         *
         *     If the request's "Accept" header is "application/json", this will conform to
         *     the [RFC7807](https://tools.ietf.org/html/rfc7807) Problem Details
         *     specification; otherwise, it may be a HTML document which contains a textual
         *     description of the error. For this reason, the "Accept" header should always
         *     be set to "application/json".
         *      */
        problem: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["problem"];
                "text/html": string;
            };
        };
        /** @description A list of users */
        "user-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["user-readList"];
            };
        };
        /** @description A user */
        "user-item": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["user-read"];
            };
        };
        /** @description A user token */
        userToken: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["userToken"];
            };
        };
        /** @description A list of group memberships for a user */
        "userGroupMembership-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * ID
                     * @description The ID of the user.
                     */
                    id?: number;
                    /**
                     * @description The name of the group.
                     *
                     *     In this context, this is the name of the group's folder.
                     *
                     * @example Basketball
                     */
                    name?: string;
                    /**
                     * @description The level of access that users have to this group.
                     *
                     *     * `private`: membership is by invitation only
                     *     * `moderated`: users may apply for membership, but must be approved
                     *     * `free`: users may join and leave at any time
                     *
                     * @enum {string}
                     */
                    type?: "private" | "moderated" | "free";
                    /**
                     * @description The level of subscription that is allowed to this group.
                     *
                     *     * `false`: users may subscribe to this group's events
                     *     * `true`: users must subscribe to this group's events, and may not
                     *       unsubscribe
                     *
                     * @example true
                     */
                    isForceFollow?: boolean;
                    /** @description Does the user have this group set as a favourite?
                     *      */
                    isFavourite?: boolean;
                    /** @description Is this user subscribed to this group's events? If so, they will be
                     *     notified when an event occurs.
                     *
                     *     Note that the group administrator may:
                     *     * Force Follow, so that users may not opt out of notifications
                     *     * Disable Notifications, so that users never receive notifications
                     *      */
                    isNotificationsOn?: boolean;
                    /**
                     * @description The enrolment status of the user for this group.
                     *
                     *     * `enroled`: the user is enroled in the group with the 'membership' permission
                     *     * `notEnroled`: the user is not enroled in the group
                     *     * `pending`: the user has requested to join the group and is currently
                     *       awaiting approval by a group admin
                     *
                     * @enum {string}
                     */
                    enrolmentStatus?: "enroled" | "notEnroled" | "pending";
                    /**
                     * @description The type of membership that this user has.
                     *
                     *     * `admin`: the user is the administrator of this group: they may add
                     *       and remove members, change the group's permissions and disband the
                     *       group
                     *     * `write`: the user may create content within the group
                     *     * `read`: the user may view content within the group, and may be
                     *       notified of and may participate in group events
                     *     * `none`: the user is not a member of the group
                     *
                     * @enum {string}
                     */
                    membership?: "admin" | "write" | "read" | "none";
                    _links?: {
                        /**
                         * Format: uri-reference
                         * @description Gives the homepage link to the group, or NULL if the group has no homepage.
                         *
                         * @example /homepage/83
                         */
                        homepage?: string | null;
                    };
                }[];
            };
        };
        /** @description A group membership */
        "userGroupMembership-item": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * ID
                     * @description The ID of the user.
                     */
                    id?: number;
                    /**
                     * @description The name of the group.
                     *
                     *     In this context, this is the name of the group's folder.
                     *
                     * @example Basketball
                     */
                    name?: string;
                    /**
                     * @description The level of access that users have to this group.
                     *
                     *     * `private`: membership is by invitation only
                     *     * `moderated`: users may apply for membership, but must be approved
                     *     * `free`: users may join and leave at any time
                     *
                     * @enum {string}
                     */
                    type?: "private" | "moderated" | "free";
                    /**
                     * @description The level of subscription that is allowed to this group.
                     *
                     *     * `false`: users may subscribe to this group's events
                     *     * `true`: users must subscribe to this group's events, and may not
                     *       unsubscribe
                     *
                     * @example true
                     */
                    isForceFollow?: boolean;
                    /** @description Does the user have this group set as a favourite?
                     *      */
                    isFavourite?: boolean;
                    /** @description Is this user subscribed to this group's events? If so, they will be
                     *     notified when an event occurs.
                     *
                     *     Note that the group administrator may:
                     *     * Force Follow, so that users may not opt out of notifications
                     *     * Disable Notifications, so that users never receive notifications
                     *      */
                    isNotificationsOn?: boolean;
                    /**
                     * @description The enrolment status of the user for this group.
                     *
                     *     * `enroled`: the user is enroled in the group with the 'membership' permission
                     *     * `notEnroled`: the user is not enroled in the group
                     *     * `pending`: the user has requested to join the group and is currently
                     *       awaiting approval by a group admin
                     *
                     * @enum {string}
                     */
                    enrolmentStatus?: "enroled" | "notEnroled" | "pending";
                    /**
                     * @description The type of membership that this user has.
                     *
                     *     * `admin`: the user is the administrator of this group: they may add
                     *       and remove members, change the group's permissions and disband the
                     *       group
                     *     * `write`: the user may create content within the group
                     *     * `read`: the user may view content within the group, and may be
                     *       notified of and may participate in group events
                     *     * `none`: the user is not a member of the group
                     *
                     * @enum {string}
                     */
                    membership?: "admin" | "write" | "read" | "none";
                    _links?: {
                        /**
                         * Format: uri-reference
                         * @description Gives the homepage link to the group, or NULL if the group has no homepage.
                         *
                         * @example /homepage/83
                         */
                        homepage?: string | null;
                    };
                };
            };
        };
        /** @description A thread */
        "discussionThread-item": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["discussionThread-read"];
                "text/html": string;
            };
        };
        /** @description a list of comments */
        "discussionComment-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["discussionComment-readList"];
                "text/html": string;
            };
        };
        /** @description A single comment */
        "discussionComment-item": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The ID of this comment. */
                    id?: number;
                    author?: {
                        /** @description The ID of this user. */
                        id?: number;
                        externalId?: components["schemas"]["externalId"];
                        /** @description The user's title (Mr., Ms., etc.). */
                        title?: string | null;
                        /** @description The user's first name. */
                        firstname?: string | null;
                        /** @description The user's full name. */
                        fullName?: string | null;
                        /** @description The user's given name. */
                        givenName?: string | null;
                        /** @description The user's last name. */
                        lastname?: string | null;
                        /** @description The user's preferred name. */
                        preferredName?: string | null;
                        _links?: {
                            avatar?: {
                                /** @description Is the currently authenticated user authorized to view the resource
                                 *     pointed to by `href`?
                                 *
                                 *     If this value is `null`, then it is not known whether the user may
                                 *     view this resource.
                                 *      */
                                auth?: boolean | null;
                                /** Format: uri */
                                href?: string | null;
                            };
                            profile?: {
                                /** @description Is the currently authenticated user authorized to view the resource
                                 *     pointed to by `href`?
                                 *
                                 *     If this value is `null`, then it is not known whether the user may
                                 *     view this resource.
                                 *      */
                                auth?: boolean | null;
                                /** Format: uri */
                                href?: string | null;
                            };
                        };
                    };
                    content?: string;
                    createdAt?: components["schemas"]["dateTimeString"];
                    updatedAt?: components["schemas"]["dateTimeString"];
                    _links?: {
                        delete?: {
                            /** Format: uri */
                            href?: string | null;
                            /** @description Is the currently authenticated user authorized to view the resource
                             *     pointed to by `href`?
                             *
                             *     If this value is `null`, then it is not known whether the user may
                             *     view this resource.
                             *      */
                            auth?: boolean | null;
                        };
                    };
                };
            };
        };
        /** @description User information, if the user was successfully authenticated and the
         *     request was made via JSON.
         *      */
        "authentication-successUser": {
            headers: {
                /** @description Contains the value of the session cookie as defined in the "session"
                 *     security scheme.
                 *      */
                Cookie?: string;
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description A schoolbox user ID number */
                    id?: number;
                    /** @description A key for accessing resources on behalf of that user like RSS or VCAL feeds */
                    key?: string;
                    /**
                     * @description The role type the user has in Schoolbox
                     * @example parent
                     * @enum {string}
                     */
                    role?: "staff" | "student" | "parent" | "guest";
                    /** @description The user who logged into the device */
                    username?: string;
                };
            };
        };
        /** @description A redirect to another location within the Schoolbox instance,
         *     if the user was successfully authenticated and the request was not made
         *     via JSON.
         *      */
        "authentication-successRedirect": {
            headers: {
                /** @description Contains the value of the session cookie as defined in the "session"
                 *     security scheme.
                 *      */
                Cookie?: string;
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Not enough data provided or could not authenticate user. */
        "authentication-failed": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description A file */
        "file-item": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example School-Events-PNG-2 */
                    fileName?: string;
                    /** @example School Events */
                    title?: string;
                    /** @example Banner image for 2022 school events
                     *      */
                    description?: string;
                    /** @example false */
                    hidden?: boolean;
                    /** @example image/png */
                    mimeType?: string;
                    /**
                     * @description file size in bytes
                     * @example 117407
                     */
                    filesize?: number;
                };
            };
        };
        /** @description A summary of the saved news item's status.
         *      */
        save: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    articleId?: components["schemas"]["id"];
                    returnUrl?: components["schemas"]["returnUrl"];
                    /** @description Was the article successfully saved?
                     *
                     *     Note this doesn't mean that the article is necessary ready for
                     *     publishing.
                     *      */
                    success?: boolean;
                    /**
                     * Format: uri
                     * @description The URL via which the user may approve this article.
                     *
                     */
                    approveRoute?: string;
                    /**
                     * Format: uri
                     * @description The URL via which the user may submit this article for publish
                     *     or review.
                     *
                     */
                    submitRoute?: string;
                    /**
                     * Format: uri
                     * @description The URL via which the user may update this article.
                     *
                     */
                    updateRoute?: string;
                };
            };
        };
        /** @description A redirect to another location within the Schoolbox instance.
         *      */
        redirect: {
            headers: {
                Location?: string;
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description A list of calendar events */
        "event-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["eventAjax"];
            };
        };
        /** @description Calendar event attendance. */
        "calendarAttendance-item": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["calendarAttendance"];
            };
        };
        /** @description A list of assessments */
        "assessment-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["assessment-list"];
            };
        };
        /** @description An assessment detail with a list of feedback items for the assessment. */
        "assessment-item": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["assessment-item"];
            };
        };
        /** @description A list of Learning Moments */
        "evidence-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: (components["schemas"]["evidenceList"] | components["schemas"]["badgeAwardList"] | components["schemas"]["dueWorkFeedbackList"])[];
                    metadata?: components["schemas"]["listMetadata"];
                };
            };
        };
        /** @description Provides all locations where this curriculum has been mapped */
        "curriculumNodeUsage-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["curriculumNodeUsage-list"];
            };
        };
        /** @description A list of courses */
        "course-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["course-list"];
            };
        };
        /** @description A list of search results */
        "result-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["result-list"];
            };
        };
        /** @description A list of search results for a page */
        "pageSubResult-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["pageSubResult-list"];
            };
        };
        /** @description Information about a group, including a list of users belonging to the group. */
        "group-user-list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    groupId?: components["schemas"]["id"];
                    /** @description The name of the group. */
                    groupName?: string;
                    settings?: {
                        /**
                         * @description Either the ?new value from the request URL, or 0 (if ?new does not exist).
                         *
                         * @example 0
                         */
                        new?: number;
                        /**
                         * @description The level of access that users have to this group.
                         *
                         *     * `private`: membership is by invitation only
                         *     * `moderated`: users may apply for membership, but must be approved
                         *     * `free`: users may join and leave at any time
                         *
                         * @example private
                         * @enum {string}
                         */
                        access?: "private" | "moderated" | "free";
                        /**
                         * @description Whether notifications are enabled for this group.
                         * @example true
                         */
                        isNotificationsEnabled?: boolean;
                        /**
                         * @description The level of subscription that is allowed to this group.
                         *
                         *     * `false`: users may subscribe to this group's events
                         *     * `true`: users must subscribe to this group's events, and may not
                         *       unsubscribe
                         *
                         * @example true
                         */
                        isForceFollow?: boolean;
                    };
                    members?: {
                        id?: components["schemas"]["id"];
                        _links?: {
                            /** @example /search/user/2 */
                            profile?: string;
                            /** @example /portrait.php?id=2&size=square64 */
                            avatar?: string;
                        };
                        /**
                         * @description The user's title (Mr., Ms., etc.).
                         * @example Ms
                         */
                        title?: string | null;
                        /**
                         * @description The user's first name.
                         *
                         *     Schoolbox doesn't distinguish between a person's actual first name
                         *     and any other names, and in any case is not the definitive source of
                         *     naming information; therefore in practice this will usually be the
                         *     user's given name.
                         *
                         * @example Rebecca
                         */
                        firstName?: string;
                        /** @description The user's preferred name. */
                        preferredName?: string | null;
                        /**
                         * @description The user's preferred name, if set. If preferred name is not set, returns the user's first name.
                         * @example John
                         */
                        givenName?: string;
                        /**
                         * @description The user's surname.
                         * @example White
                         */
                        lastName?: string | null;
                        /**
                         * @description The user's full name: usually, this is the title, first name and last
                         *     name joined together.
                         *
                         * @example Mr John Smith
                         */
                        fullName?: string;
                        /**
                         * @description The name of the Role, may not be unique.
                         * @example Staff
                         */
                        role?: string;
                        /** @example true */
                        isStaff?: boolean;
                        /**
                         * @description Comma-separated list of campuses to which the user belongs.
                         * @example Senior, Junior
                         */
                        campus?: string;
                        /**
                         * @description Name of the year level to which the user belongs, or blank if not applicable.
                         * @example Year 9
                         */
                        yearLevel?: string;
                        /**
                         * @description Name of the school house to which the user belongs, or blank if not applicable.
                         * @example Griffindor
                         */
                        house?: string;
                        /**
                         * @description The type of access the user has to the group - read, write, or admin.
                         * @example read
                         * @enum {string}
                         */
                        accessType?: "read" | "write" | "admin";
                    }[];
                };
            };
        };
    };
    parameters: {
        /** @description A generated but decodable pointer to the first record to return.
         *
         *     Each endpoint whose data accepts a cursor will return a cursor that
         *     points to the next page of the result set.
         *      */
        cursor: components["schemas"]["cursor"];
        /** @description An option to limit the returned results.
         *
         *     Each endpoint whose data accepts a limit will limit
         *     their results to that number.
         *
         *     Note a maximum limit may also apply, depending on the
         *     specific type of request.
         *      */
        limit: number;
        /** @description The ID of an item to act upon.
         *
         *     The type of item that is acted upon is dependent on the endpoint in which
         *     it is included.
         *      */
        id: number;
        /** @description The type of item that a thread is associated with.
         *
         *     Used in conjunction with contextId to find the item with which a thread
         *     is associated, and then to determine whether the authenticated user has
         *     permission to perform the requested action.
         *
         *     The following contexts are currently supported:
         *     * `comms` (the internal name for [news](/#tag/news))
         *     * `evidence` (the internal name for learning moments: not yet documented)
         *
         *     It is intended that discussion threads will be introduced to more contexts.
         *      */
        "discussion-contextType": "comms" | "evidence";
        /** @description The unique ID of the item that a thread is associated with.
         *
         *     Used in conjunction with contextType to find the item with which a
         *     thread is associated, and then to determine whether the authenticated
         *     user has permission to perform the requested action.
         *      */
        "discussion-contextId": components["schemas"]["id"];
        /** @description If provided, a relative path to redirect to upon successful authentication.
         *
         *     If not provided: will fall back to redirecting to an empty relative path (/).
         *      */
        redirect: string;
        /** @description A JWT generated via an oAuth request. */
        jwt: string;
        /** @description The machine-readable value (a.k.a. slug) for the selected news topic.
         *      */
        topic: string;
        /** @description A key which identifies a user.
         *      */
        key: string;
        /** @description Is compact mode enabled?
         *
         *     If on, the list of attachments is loaded, and any articles loaded are
         *     considered as read by the authenticated user.
         *      */
        compactMode: components["schemas"]["queryBoolean"];
        /** @description Limit of results to show per page
         *      */
        "news-limit": number;
        /** @description A keyword to search for. */
        keyword: string;
        /** @description A JSON-encoded object representing a list of values to search for. */
        filter: {
            /** @description If provided, filter the response to these types of object.
             *      */
            types?: ("assessment" | "assessment.dueWork" | "assessment.lessonPlan" | "assessment.project" | "assessment.task" | "assessment.quiz" | "badge" | "blog" | "event" | "file" | "file.audio" | "file.document" | "file.image" | "file.video" | "file.other" | "forum" | "link" | "news" | "page" | "page.class" | "page.course" | "page.unit" | "page.homepage" | "page.other" | "textBox" | "tile" | "user" | "user.guest" | "user.parent" | "user.staff" | "user.student")[];
            /** @description If provided, filter the response to results relevant within this date
             *     span.
             *
             *     (This has different meanings for different types of object.)
             *      */
            date?: {
                /**
                 * Format: date-time
                 * @description A date in YYYY-MM-DD format.
                 *
                 * @example 2023-01-01
                 */
                from?: string;
                /**
                 * Format: date-time
                 * @description A date in YYYY-MM-DD format.
                 *
                 * @example 2023-12-31
                 */
                to?: string;
            };
            /** @description If provided, filter the response to results created by this user.
             *
             *     (Currently only allows filtering by user's ID, but may allow more
             *     properties later?)
             *      */
            creator?: {
                /** @description The ID of the creator.
                 *      */
                id?: number;
            };
        };
    };
    requestBodies: {
        /** @description A user */
        "user-item": {
            content: {
                "application/json": components["schemas"]["user-write"];
            };
        };
        /** @description A group membership */
        "userGroupMembership-item": {
            content: {
                "application/json": components["schemas"]["userGroupMembership-writableFields"];
            };
        };
        /** @description A thread */
        "discussionThread-item": {
            content: {
                "application/json": components["schemas"]["discussionThread-read"];
            };
        };
        /** @description Authentication data, either via JWT or username/password.
         *      */
        authentication: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["authentication-usernamePassword"] | components["schemas"]["authentication-jwt"];
            };
        };
        /** @description A request to create a mobile app registration for a user.
         *
         *     Includes authentication data, either via JWT or username/password.
         *      */
        registration: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["registration-usernamePassword"] | components["schemas"]["registration-jwt"];
            };
        };
        /** @description Request body for deregistering a device from receiving push notifications.
         *
         *     Requires JSON content type.
         *      */
        "mobile-deregistration": {
            content: {
                "application/json": {
                    /** @description The device token to deregister */
                    token: string;
                    /** @description The app identifier */
                    appId: string;
                };
            };
        };
        /** @description News article information.
         *      */
        newsItem: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description News article title. */
                    title: string;
                    body?: components["schemas"]["body"];
                    /** @description News article blurb, as raw HTML.
                     *
                     *     If provided, the blurb will be displayed as the article's summary:
                     *     otherwise, a trimmed version the article's body will be used instead.
                     *      */
                    blurb?: string;
                    /** @description A list of IDs of topics to associate with this news article.
                     *      */
                    topics?: components["schemas"]["id"][];
                    /**
                     * @description Is this article pinned to the top of any list it is within?
                     *
                     *     (Not all users have permission to set this flag.)
                     *
                     *     A truthy integer value (0 or 1).
                     *
                     *     0 evaluates to false; 1 evaluates to true.
                     *
                     * @default 0
                     * @enum {integer}
                     */
                    sticky?: 0 | 1;
                    /**
                     * @description The datetime at which this article should be published.
                     *
                     *     The format is dependent on the Schoolbox instance's "Numerical Date Format"
                     *     and "Time Format" settings: ideally, this would just be a "datetime" format
                     *     but the datetime input was developed before JSON was used for request bodies.
                     *
                     * @example 22/06/2021 11:28am
                     */
                    publishAt: string;
                    /**
                     * @description The datetime at which this article should be achieved.
                     *
                     *     The format is dependent on the Schoolbox instance's "Numerical Date Format"
                     *     and "Time Format" settings: ideally, this would just be a "datetime" format
                     *     but the datetime input was developed before JSON was used for request bodies.
                     *
                     * @example 22/06/2021 11:28am
                     */
                    expiresAt: string;
                    /** @description A single featured image to attach to this news item, supplied as a
                     *     pointer to a file in Schoolbox. This parameter may be provided no
                     *     more than once.
                     *
                     *     The pointer will be in the format: `$locator:$location:$filename`;
                     *     the variables within the pointer have this meaning:
                     *     * `$locator` represents the strategy for finding the file:
                     *       * `store` for files uploaded to Schoolbox's storage
                     *       * `browse` finds files in Schoolbox's resource browser
                     *       * `myfile` finds files in a Schoolbox user's My Files browser
                     *       * `office365` finds files in an Office365 store
                     *     * `$location` is the location of the file within `$locator`:
                     *       * for `store` this is a file's unique hash
                     *       * for `browse` and `myfile` this is a file ID
                     *       * for `office365` this is the file's unique node
                     *     * `$filename` is the filename that the file will be given once it is
                     *       uploaded to wherever it is being uploaded
                     *
                     *     See the [Upload a file](#post-/storage/asyncUpload.php)
                     *     endpoint for details on how to upload a file, and receive a file
                     *     pointer from that upload.
                     *      */
                    attachment?: components["schemas"]["filePointer"][] | null;
                    /** @description Files to attach to this news item, supplied as pointers to a file in
                     *     Schoolbox. This parameter may be provided multiple times to attach
                     *     multiple files.
                     *
                     *     Each pointer will be in the format: `$locator:$location:$filename`;
                     *     the variables within the pointer have this meaning:
                     *     * `$locator` represents the strategy for finding the file:
                     *       * `store` for files uploaded to Schoolbox's storage
                     *       * `browse` finds files in Schoolbox's resource browser
                     *       * `myfile` finds files in a Schoolbox user's My Files browser
                     *       * `office365` finds files in an Office365 store
                     *     * `$location` is the location of the file within `$locator`:
                     *       * for `store` this is a file's unique hash
                     *       * for `browse` and `myfile` this is a file ID
                     *       * for `office365` this is the file's unique node
                     *     * `$filename` is the filename that the file will be given once it is
                     *       uploaded to wherever it is being uploaded
                     *
                     *     See the [Upload a file](#post-/storage/asyncUpload.php)
                     *     endpoint for details on how to upload a file, and receive a file
                     *     pointer from that upload.
                     *      */
                    attachedFiles?: components["schemas"]["filePointer"][] | null;
                    /** @description A comma-separated list of audiences for this news item.
                     *
                     *     Each audience will be in one of two formats:
                     *     * simple audiences: `$entityType:$entityValue:$relationship`
                     *     * composite audiences: `composite;$relationship;`, then two simple
                     *       audiences, delimited by a `.` character
                     *
                     *     The variables within each audience string have this meaning:
                     *     * `$entityType` is the type of audience: currently out of
                     *       `campus`, `folder`, `role`, `school_house`, `year`
                     *     * `$entityValue` is the identifier for the audience, JSON-encoded
                     *       then base64-encoded
                     *     * `$relationship` is the users who are actually in the identified
                     *       audience:
                     *       * `self` for the users associated directly with the audience
                     *       * `teachers_of` for the teachers of users in the audience
                     *       * `parents_of` for the parents of users in the audience
                     *
                     *     Composite audiences will only contain users who are in both of the
                     *     simple audiences.
                     *
                     *     Examples:
                     *     * `campus:IjEi:self` is a simple audience, targeting users in campus
                     *       ID 1
                     *     * `folder:IjU1Ig==:parents_of` is a simple audience, targeting
                     *       parents of users in folder ID 55
                     *     * `folder:IjU1Ig==:parents_of` is a simple audience, targeting
                     *       parents of users in folder ID 55
                     *     * `folder:Ijki==:teachers_of` is a simple audience, targeting
                     *       teachers of users in year ID 9
                     *     * `composite;self;campus:IjIi:self.year:IjQi:self` is a composite
                     *       audience, targeting the intersection of:
                     *       * users in campus ID 2
                     *       * users in year ID 3
                     *      */
                    audience: string;
                };
            };
        };
        /** @description A notification message. */
        userNotify: {
            content: {
                "application/json": {
                    /**
                     * @description The content of the notification message.
                     *
                     *     May contain placeholder values, preceded with a `:` character
                     *     (e.g. `:placeholderName`): these will be replaced with the
                     *     corresponding value in `messageParams`.
                     *
                     * @example Checkout the :version Release notes
                     *
                     */
                    message: string;
                    /**
                     * @description A set of key-value pairs: each key should match a placeholder in
                     *     `message`, and its corresponding value will replace that placeholder
                     *     in the final message.
                     *
                     * @example {
                     *       "version": "25.0"
                     *     }
                     */
                    messageParams?: {
                        [key: string]: string;
                    };
                    from?: {
                        /**
                         * @description User who initially created this message, if unset defaults to Unknown User.
                         *
                         * @example Schoolbox Admin
                         */
                        fullName?: string;
                    };
                    /**
                     * Format: uri-reference
                     * @description Url for when clicking the notification to redirect to, if unset, defaults to #
                     *     can be both absolute or relative.
                     *
                     * @example https://help.schoolbox.com.au/homepage/3343
                     */
                    href?: string;
                };
            };
        };
        /** @description A Learning Moment */
        "evidence-item": {
            content: {
                "application/json": {
                    /** @example <p>I can count forwards and backwards by 2s.</p>\n */
                    body: string;
                    /**
                     * @description hash as returned by asyncUpload.php
                     * @example store:1f8f836cce05750ac98302c74d4081f99fdd443f
                     */
                    file?: string | null;
                    curriculumNodes?: components["schemas"]["curriculumItem"][] | null;
                    tags?: {
                        /**
                         * @description the DB identifier of the Learning Moment Tags
                         * @example 1
                         */
                        id?: number;
                        /**
                         * @description the name of the Learning Moment type, may not be unique
                         * @example Class Work
                         */
                        name?: string;
                    }[] | null;
                    /**
                     * @example upload
                     * @enum {string}
                     */
                    type: "photo" | "text" | "upload" | "video" | "audio";
                };
            };
        };
        /** @description Pastoral record
         *      */
        "pastoral-item": {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The ID of a student to create this pastoral record for. */
                    student_id: number;
                    /** @description A comma separated list of IDs of students to create this pastoral record for. */
                    duplicateIds?: string | null;
                    /** @description Pastoral record title. */
                    heading: string;
                    /**
                     * Format: date
                     * @description The date on which this is occurred in the format configured in your Admin area.
                     * @example 22/06/2021
                     */
                    occurredOn?: string | null;
                    /** @description The ID of a pastoral type to associate with this pastoral record. */
                    typeId: number;
                    /** @description The ID of a pastoral sub-type to associate to this pastoral record.\
                     *     The sub-type must already be associated with the type provided as typeId.\
                     *     This can be null, if the pastoral type does not have any sub-type.\
                     *     This cannot be null, if the pastoral type has sub-type(s).
                     *      */
                    subtypeId?: number | null;
                    /** @description The ID of a pastoral severity to associate with this pastoral record.\
                     *     Required only if Allow specification of severity on pastoral records config is ON.
                     *      */
                    severityId?: number | null;
                    /** @description General content of this pastoral record in raw HTML.\
                     *     The following tokens will be substituted with the students details on creation: [firstname], [preferredname], [surname], [fullname], [year], [house].
                     *      */
                    body_public?: string | null;
                    /** @description Confidential content of this pastoral record in raw HTML.\
                     *     The following tokens will be substituted with the students details on creation: [firstname], [preferredname], [surname], [fullname], [year], [house].
                     *      */
                    body_private?: string | null;
                    /** @description Files to attach to general content of the pastoral record, supplied as pointers to a file in Schoolbox.\
                     *     Each pointer will be in the format:\
                     *     `$locator:$location:$filename`
                     *     The variables within the pointer have this meaning:
                     *     * `$locator` represents the strategy for finding the file:
                     *       * `store` for files uploaded to Schoolbox's storage
                     *       * `browse` finds files in Schoolbox's resource browser
                     *       * `myfile` finds files in a Schoolbox user's My Files browser
                     *       * `office365` finds files in an Office365 store
                     *     * `$location` is the location of the file within `$locator`:
                     *       * for `store` this is a file's unique hash
                     *       * for `browse` and `myfile` this is a file ID
                     *      * for `office365` this is the file's unique node
                     *     * `$filename` is the filename that the file will be given once it is uploaded to wherever it is being uploaded
                     *
                     *     See the [Upload a file](#post-/storage/asyncUpload.php) endpoint for details on how to upload a file, and receive a file pointer from that upload.
                     *      */
                    "public_attachments[]"?: unknown[] | null;
                    /** @description Files to attach to confidential content of the pastoral record, supplied as pointers to a file in Schoolbox.\
                     *     Each pointer will be in the format:\
                     *     `$locator:$location:$filename`
                     *     The variables within the pointer have this meaning:
                     *     * `$locator` represents the strategy for finding the file:
                     *       * `store` for files uploaded to Schoolbox's storage
                     *       * `browse` finds files in Schoolbox's resource browser
                     *       * `myfile` finds files in a Schoolbox user's My Files browser
                     *       * `office365` finds files in an Office365 store
                     *     * `$location` is the location of the file within `$locator`:
                     *       * for `store` this is a file's unique hash
                     *       * for `browse` and `myfile` this is a file ID
                     *      * for `office365` this is the file's unique node
                     *     * `$filename` is the filename that the file will be given once it is uploaded to wherever it is being uploaded
                     *
                     *     See the [Upload a file](#post-/storage/asyncUpload.php) endpoint for details on how to upload a file, and receive a file pointer from that upload.
                     *      */
                    "private_attachments[]"?: unknown[] | null;
                    /** @description An array of IDs of pastoral action.\
                     *     Available only if Enable Pastoral Actions config is ON.
                     *      */
                    "actions[]"?: number[] | null;
                    /** @description Comma separated IDs of existing Pastoral Record Tags.\
                     *     If non numerical string is provided, it'll be silently discarded.\
                     *     To provide a name to create a new tag, use tagNames instead.
                     *      */
                    tags?: string | null;
                    /** @description Comma separated names of Pastoral Record Tags.\
                     *     If Allow Staff to Create Pastoral Care Tags config is ON, attempts to create a new tag, if not alraeady exists.\
                     *     The max length of a tag name is 255 chars.
                     *      */
                    tagNames?: string | null;
                    /**
                     * Format: float
                     * @description Points of this pastoral record.
                     */
                    points?: number | null;
                    /** @description An array of pairs of a role and its access level to this pastoral record in the format of:\
                     *     `$roleId => $accessLevel`
                     *     * `$roleId` is one of the following:
                     *       * The ID of a role of Staff Role Type with Access Pastoral Care permission
                     *       * 'role-type-parent' (requires Allow Parent Pastoral Access config enabled)
                     *       * 'role-type-student' (requires Allow Student Pastoral Access config enabled)
                     *     * `$accessLevel` is an integer representation of access level of the $roleId
                     *       * 0 - Deny
                     *       * 1 - General
                     *       * 2 - General + Confidential
                     *      */
                    role?: unknown[] | null;
                    /** @description An array of pairs of a pastoral group and its access level to this pastoral record in the format of:\
                     *     `$pastoralGroupId => $accessLevel`
                     *     * `$pastoralGroupId` is the ID of a pastoral group to set access level to
                     *     * `$accessLevel` is an integer representation of access level of the $roleId
                     *       * 0 - Deny
                     *       * 1 - General
                     *       * 2 - General + Confidential
                     *      */
                    group?: unknown[] | null;
                    /** @description An array of pairs of a user and its access level to this pastoral record in the format of:\
                     *     `$userId => $accessLevel`
                     *     * `$userId` is ID of a user to set access level to. The user must be one of:
                     *       * a staff with pastoral access
                     *       * a parent of the student (requires Allow Parent Pastoral Access enabled)
                     *     * `$accessLevel` is an integer representation of access level of the $roleId
                     *       * 0 - Deny
                     *       * 1 - General
                     *       * 2 - General + Confidential
                     *      */
                    user?: unknown[] | null;
                };
            };
        };
        /** @description Pastoral record
         *      */
        "pastoral-partial-item": {
            content: {
                "application/json": {
                    /** @description Pastoral record title. */
                    heading?: string;
                    /**
                     * Format: date
                     * @description The date on which this is occurred in the format configured in your Admin area. This also accepts RFC3339 format such as 2021-06-22T01:23:45+10:00
                     * @example 2021-06-22T01:23:45+10:00
                     */
                    occurredOn?: string | null;
                    /** @description The ID of a pastoral type to associate with this pastoral record. */
                    typeId?: number;
                    /** @description The ID of a pastoral sub-type to associate to this pastoral record.\
                     *     The sub-type must already be associated with the type provided as typeId.\
                     *     This can be null, if the pastoral type does not have any sub-type.\
                     *     This cannot be null, if the pastoral type has sub-type(s).
                     *      */
                    subtypeId?: number | null;
                    /** @description The ID of a pastoral severity to associate with this pastoral record.\
                     *     Required only if Allow specification of severity on pastoral records config is ON.
                     *      */
                    severityId?: number | null;
                    /** @description General content of this pastoral record in raw HTML.\
                     *     The following tokens will be substituted with the students details on creation: [firstname], [preferredname], [surname], [fullname], [year], [house].
                     *      */
                    body_public?: string | null;
                    /** @description Confidential content of this pastoral record in raw HTML.\
                     *     The following tokens will be substituted with the students details on creation: [firstname], [preferredname], [surname], [fullname], [year], [house].
                     *      */
                    body_private?: string | null;
                    /** @description An array of IDs of pastoral action.\
                     *     Available only if Enable Pastoral Actions config is ON.
                     *      */
                    "actions[]"?: number[] | null;
                    /** @description Comma separated IDs of existing Pastoral Record Tags.\
                     *     If non numerical string is provided, it'll be silently discarded.\
                     *     To provide a name to create a new tag, use tagNames instead.
                     *      */
                    tags?: string | null;
                    /** @description Comma separated names of Pastoral Record Tags.\
                     *     If Allow Staff to Create Pastoral Care Tags config is ON, attempts to create a new tag, if not alraeady exists.\
                     *     The max length of a tag name is 255 chars.
                     *      */
                    tagNames?: string | null;
                    /**
                     * Format: float
                     * @description Points of this pastoral record.
                     */
                    points?: number | null;
                    /** @description An array of pairs of a role and its access level to this pastoral record in the format of:\
                     *     `$roleId => $accessLevel`
                     *     * `$roleId` is one of the following:
                     *       * The ID of a role of Staff Role Type with Access Pastoral Care permission
                     *       * 'role-type-parent' (requires Allow Parent Pastoral Access config enabled)
                     *       * 'role-type-student' (requires Allow Student Pastoral Access config enabled)
                     *     * `$accessLevel` is an integer representation of access level of the $roleId
                     *       * 0 - Deny
                     *       * 1 - General
                     *       * 2 - General + Confidential
                     *      */
                    role?: unknown[] | null;
                    /** @description An array of pairs of a pastoral group and its access level to this pastoral record in the format of:\
                     *     `$pastoralGroupId => $accessLevel`
                     *     * `$pastoralGroupId` is the ID of a pastoral group to set access level to
                     *     * `$accessLevel` is an integer representation of access level of the $roleId
                     *       * 0 - Deny
                     *       * 1 - General
                     *       * 2 - General + Confidential
                     *      */
                    group?: unknown[] | null;
                    /** @description An array of pairs of a user and its access level to this pastoral record in the format of:\
                     *     `$userId => $accessLevel`
                     *     * `$userId` is ID of a user to set access level to. The user must be one of:
                     *       * a staff with pastoral access
                     *       * a parent of the student (requires Allow Parent Pastoral Access enabled)
                     *     * `$accessLevel` is an integer representation of access level of the $roleId
                     *       * 0 - Deny
                     *       * 1 - General
                     *       * 2 - General + Confidential
                     *      */
                    user?: unknown[] | null;
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    userSearch: {
        parameters: {
            query?: {
                /** @description Will search `username`, `firstname`, `lastname` and `preferred_name` for non exact matches.
                 *      */
                search?: string;
                /** @description Json encoded object of fields and values to filter users on. \
                 *     For example, to get user with username `jcoles`: \
                 *     `filter=%7b%22username%22%3a%22jcoles%22%7d`
                 *      */
                filter?: {
                    /** @example 501 */
                    externalId?: string;
                    /** @example jreed */
                    username?: string;
                    /** @example jreed@schoolbox.com.au */
                    email?: string;
                    /** @description A Year level to filter users with. */
                    year?: {
                        /**
                         * @description The DB identifier of the Year Level.
                         * @example 6
                         */
                        id?: number;
                    } | {
                        /**
                         * @description The name of the Year Level, may not be unique.
                         * @example Year 6
                         */
                        name?: string;
                    };
                    /** @description A role to filter users with. */
                    role?: {
                        /**
                         * @description The DB identifier of the Role.
                         * @example 1
                         */
                        id?: number;
                    } | {
                        /**
                         * @description The name of the Role, may not be unique.
                         * @example Staff
                         */
                        name?: string;
                    };
                    /** @enum {string} */
                    roleType?: "student" | "staff" | "parent" | "guest";
                    /** @description A campus to filter users with. */
                    campus?: {
                        /**
                         * @description The DB identifier of the Campus.
                         * @example 6
                         */
                        id?: number;
                    } | {
                        /**
                         * @description The name of the Campus, may not be unique.
                         * @example Senior
                         */
                        name?: string;
                    };
                };
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["user-list"];
            default: components["responses"]["problem"];
        };
    };
    userPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["user-item"];
        responses: {
            201: components["responses"]["user-item"];
        };
    };
    userGetTokenForUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["userToken"];
            default: components["responses"]["problem"];
        };
    };
    userGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["user-item"];
            default: components["responses"]["problem"];
        };
    };
    userPut: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["user-item"];
        responses: {
            200: components["responses"]["user-item"];
            default: components["responses"]["problem"];
        };
    };
    userDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The resource was deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    userPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["user-item"];
        responses: {
            200: components["responses"]["user-item"];
            default: components["responses"]["problem"];
        };
    };
    userGroupMembershipSearch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["userGroupMembership-list"];
            default: components["responses"]["problem"];
        };
    };
    userGroupMembershipGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["userGroupMembership-item"];
            default: components["responses"]["problem"];
        };
    };
    userGroupMembershipPut: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["userGroupMembership-item"];
        responses: {
            200: components["responses"]["userGroupMembership-item"];
            default: components["responses"]["problem"];
        };
    };
    userGroupMembershipPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["userGroupMembership-item"];
        responses: {
            201: components["responses"]["userGroupMembership-item"];
            default: components["responses"]["problem"];
        };
    };
    userGroupMembershipDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The resource was deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    userGroupMembershipPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["userGroupMembership-item"];
        responses: {
            200: components["responses"]["userGroupMembership-item"];
            default: components["responses"]["problem"];
        };
    };
    userGetTokenForSelf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["userToken"];
            default: components["responses"]["problem"];
        };
    };
    createThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
            };
            cookie?: never;
        };
        /** @description Common fields for discussion threads. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Is the thread open for further comments? */
                    open: boolean;
                };
            };
        };
        responses: {
            200: components["responses"]["discussionThread-item"];
            default: components["responses"]["problem"];
        };
    };
    getThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["discussionThread-item"];
            default: components["responses"]["problem"];
        };
    };
    openThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["discussionThread-item"];
        responses: {
            /** @description Enable the thread */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    closeThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["discussionThread-item"];
        responses: {
            /** @description Disable the thread */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    getCommentsByThread: {
        parameters: {
            query?: {
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
            };
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["discussionComment-list"];
            default: components["responses"]["problem"];
        };
    };
    createCommentInThread: {
        parameters: {
            query?: {
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
            };
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description A single comment. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Comment content. */
                    content: string;
                };
            };
        };
        responses: {
            200: components["responses"]["discussionComment-item"];
            default: components["responses"]["problem"];
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The resource was deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    getCommentsByParent: {
        parameters: {
            query?: {
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
            };
            header?: never;
            path: {
                /** @description The type of item that a thread is associated with.
                 *
                 *     Used in conjunction with contextId to find the item with which a thread
                 *     is associated, and then to determine whether the authenticated user has
                 *     permission to perform the requested action.
                 *
                 *     The following contexts are currently supported:
                 *     * `comms` (the internal name for [news](/#tag/news))
                 *     * `evidence` (the internal name for learning moments: not yet documented)
                 *
                 *     It is intended that discussion threads will be introduced to more contexts.
                 *      */
                contextType: components["parameters"]["discussion-contextType"];
                /** @description The unique ID of the item that a thread is associated with.
                 *
                 *     Used in conjunction with contextType to find the item with which a
                 *     thread is associated, and then to determine whether the authenticated
                 *     user has permission to perform the requested action.
                 *      */
                contextId: components["parameters"]["discussion-contextId"];
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["discussionComment-list"];
            default: components["responses"]["problem"];
        };
    };
    apiSessionGet: {
        parameters: {
            query: {
                /** @description If provided, a relative path to redirect to upon successful authentication.
                 *
                 *     If not provided: will fall back to redirecting to an empty relative path (/).
                 *      */
                redirect?: components["parameters"]["redirect"];
                /** @description A JWT generated via an oAuth request. */
                jwt: components["parameters"]["jwt"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["authentication-successUser"];
            302: components["responses"]["authentication-successRedirect"];
            400: components["responses"]["authentication-failed"];
            default: components["responses"]["problem"];
        };
    };
    apiSessionPost: {
        parameters: {
            query?: {
                /** @description If provided, a relative path to redirect to upon successful authentication.
                 *
                 *     If not provided: will fall back to redirecting to an empty relative path (/).
                 *      */
                redirect?: components["parameters"]["redirect"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["authentication"];
        responses: {
            200: components["responses"]["authentication-successUser"];
            302: components["responses"]["authentication-successRedirect"];
            400: components["responses"]["authentication-failed"];
            default: components["responses"]["problem"];
        };
    };
    mobileRegister: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The provider that will handle the sending of push notifications to the device.
                 *
                 *     While Apple (APNS) and Google Android (GCM) are still supported, they are deprecated.
                 *
                 * @example Firebase
                 */
                provider: "GCM" | "APNS" | "Firebase" | "Digistorm";
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["registration"];
        responses: {
            201: components["responses"]["authentication-successUser"];
            /** @description This error occurs when the registration request cannot be processed due to a missing or invalid parameter.
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                    "application/json": {
                        /** @description Error message indicating required fields */
                        required?: string;
                    };
                };
            };
            401: components["responses"]["authentication-failed"];
            default: components["responses"]["problem"];
        };
    };
    mobileDeregister: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The type of device that is connecting to the service.
                 *
                 *     Only "Firebase" is currently supported for deregistration.
                 *
                 * @example Firebase
                 */
                provider: "GCM" | "APNS" | "Firebase" | "Digistorm";
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["mobile-deregistration"];
        responses: {
            /** @description Device successfully deregistered */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description This error occurs when the deregistration request cannot be processed. Common causes include:
             *     - An unsupported provider specified in the path parameter
             *     - No matching registration found for the provided device token and app ID combination
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            default: components["responses"]["problem"];
        };
    };
    storageAsyncUpload: {
        parameters: {
            query?: {
                /** @description An optional date at which the uploaded file is considered to expire: after
                 *     this date, the file will be subject to garbage collection.
                 *
                 *     If not provided: the uploaded file will never expire.
                 *      */
                expiryDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The file being uploaded.
                     *
                     */
                    upload: string;
                };
            };
        };
        responses: {
            /** @description A description of a file upload.
             *      */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The HTTP response code, usually 200 for a successful upload.
                         *      */
                        error?: number;
                        /** @description A pointer to the now uploaded file within Schoolbox, in the format
                         *     `store:$hash`.
                         *
                         *     `store` is the locator used to find the file: `$hash` is its
                         *     location within the store.
                         *      */
                        hash?: string;
                        /** @description A user-friendly message for what went wrong with the upload
                         *     (if anything).
                         *      */
                        message?: string;
                        /** @description File metadata.
                         *      */
                        meta?: {
                            /** @description The mimetype of the uploaded file.
                             *      */
                            type?: string;
                            /** @description The uploaded file's size, in bytes.
                             *      */
                            size?: number;
                            /** @description The uploaded file's name.
                             *      */
                            name?: string;
                            file?: components["schemas"]["file"];
                        };
                        success?: boolean;
                    };
                };
            };
        };
    };
    filePatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the file. */
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example false */
                    hidden?: boolean;
                };
            };
        };
        responses: {
            200: components["responses"]["file-item"];
            default: components["responses"]["problem"];
        };
    };
    "commsNews.postCreate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["newsItem"];
        responses: {
            200: components["responses"]["save"];
            default: components["responses"]["problem"];
        };
    };
    "commsNews.getTopics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All available news topics. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["topic"][];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNews.getDetail": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single news article.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Has the authenticated user saved this article for later?
                         *      */
                        isSavedForLater?: boolean;
                        article?: components["schemas"]["commonFields"] & {
                            body?: components["schemas"]["body"];
                            author?: components["schemas"]["author"];
                            /** @description Files attached to this article. */
                            attachedFiles?: components["schemas"]["file"][];
                            status?: components["schemas"]["status"];
                            statusDate?: components["schemas"]["statusDate"];
                            sticky?: components["schemas"]["sticky"];
                            _links?: components["schemas"]["links"];
                        };
                    };
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNews.postUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["newsItem"];
        responses: {
            200: components["responses"]["save"];
            default: components["responses"]["problem"];
        };
    };
    "commsNews.postDelete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A summary of the deleted news item.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Was the article successfully deleted?
                         *      */
                        success?: boolean;
                        returnUrl?: components["schemas"]["returnUrl"];
                    };
                };
            };
            302: components["responses"]["redirect"];
            default: components["responses"]["problem"];
        };
    };
    "commsNewsModeration.setStatus": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
                /** @description The status to put the article into.
                 *
                 *     - `submit`: put the article into the mod queue
                 *     - `accept`: accept the article for publication
                 *     - `reject`: block the article from being published, or retract it from
                 *                 publication
                 *      */
                status: "submit" | "accept" | "reject";
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Why was the article rejected?
                     *
                     *     (Only applies if rejecting the article.)
                     *      */
                    rejectionReason?: string;
                };
            };
        };
        responses: {
            302: components["responses"]["redirect"];
            /** @description A summary of the article's status change.
             *      */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description * `0`: successfully approved
                         *     * `1`:
                         *       * some attributes invalid (if the response code was invalid)
                         *       * some other user has already put the article in this state,
                         *         and there is otherwise no difference
                         *         (if the response code was valid)
                         *     * `2`: some other user has already put the article in this
                         *       state, and there is a conflict in the reason for
                         *       putting it in this state
                         *     * `3`: the article may not be put into this state
                         *     * `4`: an unspecified error
                         *      */
                        errorCode?: number;
                        /** @description A brief message detailing what succeeded, or went wrong
                         *      */
                        message?: string;
                        /**
                         * Format: uri
                         * @description A URL to redirect to once the article state changes
                         *
                         */
                        redirect?: string;
                    };
                };
            };
        };
    };
    "commsNewsSaveForLater.getList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The IDs of all saved news articles for the authenticated user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["id"][];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNewsSaveForLater.postAdd": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Currently always empty for this endpoint.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [] */
                    "application/json": unknown[];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNewsSaveForLater.postRemove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Currently always empty for this endpoint.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [] */
                    "application/json": unknown[];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNews.getAuthoredArticles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of articles which the authenticated user has written.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["commonFields"] & {
                        author?: components["schemas"]["authorNameOnly"];
                        sticky?: components["schemas"]["sticky"];
                        readMore?: components["schemas"]["readMore"];
                        _links?: components["schemas"]["links"];
                    })[];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNews.getListForIndex": {
        parameters: {
            query?: {
                /** @description The machine-readable value (a.k.a. slug) for the selected news topic.
                 *      */
                topic?: components["parameters"]["topic"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of articles which are audienced to the authenticated user.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["commonFields"] & {
                        status?: components["schemas"]["status"];
                        statusDate?: components["schemas"]["statusDate"];
                        readMore?: components["schemas"]["readMore"];
                        metadata?: {
                            /** @description The number of comments on this article.
                             *
                             *     May be null, in which case there are no comments.
                             *      */
                            commentCount?: number;
                        };
                        /** @description The number of attachments on this article.
                         *
                         *     May be null, in which case there are no attachments.
                         *      */
                        attachments?: number;
                        viewedAt?: unknown & components["schemas"]["dateTimeString"];
                        _links?: components["schemas"]["links"];
                    })[];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNewsFeed.getFeedForUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A key which identifies a user.
                 *      */
                key: components["parameters"]["key"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description RSS feed of articles.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/rss+xml": string;
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "commsNews.getListForHomepage": {
        parameters: {
            query?: {
                /** @description Is compact mode enabled?
                 *
                 *     If on, the list of attachments is loaded, and any articles loaded are
                 *     considered as read by the authenticated user.
                 *      */
                c?: components["parameters"]["compactMode"];
                /** @description Limit of results to show per page
                 *      */
                l?: components["parameters"]["news-limit"];
            };
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of articles which are audienced to the given folder.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["commonFields"] & {
                        body?: components["schemas"]["body"];
                        author?: components["schemas"]["author"];
                        status?: components["schemas"]["status"];
                        statusDate?: components["schemas"]["statusDate"];
                    })[];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    getCalendarAjaxFull: {
        parameters: {
            query: {
                /** @description The ID of the user for whom to retrieve calendar events. */
                userId: components["schemas"]["id"];
                /** @description Unix timestamp representing the start of the date range for which to retrieve calendar events. */
                start?: number;
                /** @description Unix timestamp representing the end of the date range for which to retrieve calendar events. */
                end?: number;
                componentInstanceId?: components["schemas"]["id"];
                /** @description If true, only timetable-based events are returned. */
                timetableCalendar?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["event-list"];
            default: components["responses"]["problem"];
        };
    };
    "calendarEvent.postCreate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event to create
         *      */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["eventRequestFieldsForCreate"];
            };
        };
        responses: {
            /** @description The created event
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["eventResponseFields"];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "calendarEvent.postModify": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The event including desired modifications
         *      */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["eventRequestFieldsForModify"];
            };
        };
        responses: {
            /** @description The modified event
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["eventResponseFields"];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "calendarEvent.postMove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The new start date as a RFC3339 string. Eg. "2018-01-28T00:00:00+11:00".
                     *
                     * @example 2018-01-28T00:00:00+11:00
                     */
                    start?: string;
                    /**
                     * @description The new end date as a RFC3339 string. Eg. "2018-01-28T00:00:00+11:00".
                     *
                     * @example 2018-01-28T00:00:00+11:00
                     */
                    end?: string;
                    /**
                     * @description Whether the event is an all day event - 1 means 'all day', 0 means 'not all day'.
                     * @example 0
                     * @enum {integer}
                     */
                    allDay?: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Empty body
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    "calendarEvent.postDelete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Either 'self' (to delete only the one event), or 'series' (to delete all events in the series).
                     *
                     * @example self
                     * @enum {string}
                     */
                    efficacy?: "self" | "series";
                };
            };
        };
        responses: {
            /** @description Empty body
             *      */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    getCalendarEventAttendance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["calendarAttendance-item"];
            default: components["responses"]["problem"];
        };
    };
    postCalendarEventAttendanceCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A comma separated list of user IDs to invite to this event.
                     *      */
                    guests?: string;
                };
            };
        };
        responses: {
            200: components["responses"]["calendarAttendance-item"];
            default: components["responses"]["problem"];
        };
    };
    postCalendarEventAttendanceAccept: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["calendarAttendance-item"];
            default: components["responses"]["problem"];
        };
    };
    postCalendarEventAttendanceDecline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["calendarAttendance-item"];
            default: components["responses"]["problem"];
        };
    };
    postCalendarEventAttendanceDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description A user ID to remove attendance from.
                     *      */
                    userId?: number;
                };
            };
        };
        responses: {
            200: components["responses"]["calendarAttendance-item"];
            default: components["responses"]["problem"];
        };
    };
    assessmentSearch: {
        parameters: {
            query: {
                /** @description URL-encoded JSON object consisting of fields and values to filter assessments on.
                 *
                 *     Example 1:
                 *
                 *     JSON filter: \
                 *     `{"dueDate":{"from":"2025-01-01T00:00:00+10:00"}}`
                 *
                 *     URL-encoded JSON filter: \
                 *     `%7B%22dueDate%22%3A%7B%22from%22%3A%222025-01-01T00%3A00%3A00%2B10%3A00%22%7D%7D`
                 *
                 *     Example 2:
                 *
                 *     JSON filter: \
                 *     `{"assessmentId":256,"title":"English 3/4 [Final]","assessmentType":"dueWork","folder":[{"id":80}],"weighted":false,"workType":{"id":1,"name":"Formative Assessment"},"dueDate":{"from":"2017-10-12T14:20:50+10:00","to":"2019-10-12T14:20:50+10:00"},"yearLevel":{"id":6,"name":"Year 6"}}`
                 *
                 *     URL-encoded JSON filter: \
                 *     `%7B%22assessmentId%22%3A256%2C%22title%22%3A%22English%203%2F4%20%5BFinal%5D%22%2C%22assessmentType%22%3A%22dueWork%22%2C%22folder%22%3A%5B%7B%22id%22%3A80%7D%5D%2C%22weighted%22%3Afalse%2C%22workType%22%3A%7B%22id%22%3A1%2C%22name%22%3A%22Formative%20Assessment%22%7D%2C%22dueDate%22%3A%7B%22from%22%3A%222017-10-12T14%3A20%3A50%2B10%3A00%22%2C%22to%22%3A%222019-10-12T14%3A20%3A50%2B10%3A00%22%7D%2C%22yearLevel%22%3A%7B%22id%22%3A6%2C%22name%22%3A%22Year%206%22%7D%7D`
                 *
                 *     --
                 *
                 *     The full URL to use either of the above examples will look like this: \
                 *     `[base URL]/api/assessment?filter=[URL-encoded JSON filter]`
                 *      */
                filter: {
                    /**
                     * @description The ID of the assessment to search.
                     *
                     * @example 256
                     */
                    assessmentId?: number;
                    /**
                     * @description A part of title to filter assessments on.
                     *
                     * @example English 3/4 [Final]
                     */
                    title?: string;
                    /**
                     * @description The type of assessments to filter on.
                     * @example dueWork
                     * @enum {string}
                     */
                    assessmentType?: "task" | "quiz" | "dueWork" | "LTI" | "project";
                    folder?: ({
                        /**
                         * @description ID of the folder containing the assessment.
                         * @example 80
                         */
                        id: number;
                    } | {
                        /**
                         * @description Code of the folder containing the assessment.
                         * @example 9ENGA
                         */
                        code: string;
                    })[] | {
                        /**
                         * @description ID of the folder containing the assessment.
                         * @example 80
                         */
                        id: number;
                    };
                    subjectCode?: string[];
                    /**
                     * @description Limit assessments to only those that have a weight set.
                     *
                     * @example false
                     */
                    weighted?: boolean;
                    /** @description Select either one of the following fields to filter on:
                     *      */
                    workType?: {
                        /**
                         * @description The DB identifier of the worktype.
                         * @example 1
                         */
                        id?: number;
                        /**
                         * @description The name of the work type, may not be unique.
                         * @example Formative Assessment
                         */
                        name?: string;
                    };
                    dueDate?: {
                        /**
                         * Format: date-time
                         * @description An RFC3339 time string including timezone eg. 2017-10-12T14:20:50+10:00
                         *
                         * @example 2017-10-12T14:20:50+10:00
                         */
                        from?: string;
                        /**
                         * Format: date-time
                         * @description An RFC3339 time string including timezone eg. 2017-10-12T14:20:50+10:00
                         *
                         * @example 2019-10-12T14:20:50+10:00
                         */
                        to?: string;
                    };
                    /** @description Select either one of the following fields to filter on year levels associated with folder:
                     *      */
                    yearLevel?: {
                        /**
                         * @description The db identifier of the yearlevel.
                         * @example 6
                         */
                        id?: number;
                        /**
                         * @description The name of the year level, may not be unique.
                         * @example Year 6
                         */
                        name?: string;
                    };
                    project?: {
                        /**
                         * @description ID of the parent assessment (project).
                         * @example 255
                         */
                        id?: number;
                    };
                };
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["assessment-list"];
            default: components["responses"]["problem"];
        };
    };
    assessmentGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["assessment-item"];
            default: components["responses"]["problem"];
        };
    };
    "assessment.postFeedback": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the assessment */
                assessmentId: number;
                /** @description The ID of the student */
                studentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The ID of the student submission this feedback relates to (optional)
                     * @example 12345
                     */
                    responseId?: number;
                    /**
                     * @description The mark/grade to assign (can be numeric or string format).
                     *     Valid formats include:
                     *     - Letter grades: "A+", "B-", "C"
                     *     - Status indicators: "Absent", "Incomplete"
                     *     - Numeric values: 95, 87.5
                     *     - Percentage strings: "67 %", "85%"
                     *     - Fraction strings: "5/10", "18/20"
                     *
                     * @example A+
                     */
                    mark?: number | string;
                    /**
                     * @description Feedback comment
                     * @example Excellent work! Your analysis was thorough and well-structured.
                     */
                    comment?: string;
                    /**
                     * @description Whether to publish the feedback (1) or keep as draft (0)
                     * @example 1
                     * @enum {integer}
                     */
                    publish?: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Successfully created feedback for the assessment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example OK */
                        message?: string;
                        id?: number;
                    };
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "assessment.postSubmission": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the assessment */
                assessmentId: number;
                /** @description The ID of the student */
                studentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description HTML content of the submission
                     * @example <p>This is my submission for the assessment.</p>
                     */
                    body?: string;
                    /** @description Array of file references that were previously uploaded */
                    attachment?: string[];
                };
            };
        };
        responses: {
            /** @description Successfully created submission for the assessment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example OK */
                        message?: string;
                        /**
                         * @description The ID of the created submission
                         * @example 102
                         */
                        id?: number;
                    };
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "apiusernotify.apiUserNotify": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["userNotify"];
        responses: {
            /** @description The notification was sent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    "learningMomentEvidence.postMomentForUsers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["evidence-item"];
        responses: {
            /** @description Successfully Created a Learning moment. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["evidenceItem"];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    putEvidence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["evidence-item"];
        responses: {
            /** @description Successfully Updated a Learning moment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["evidenceItem"];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    deleteEvidence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Learning Moment was deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["problem"];
        };
    };
    evidenceFeed: {
        parameters: {
            query?: {
                filter?: {
                    /** @example [
                     *       "achievements",
                     *       "feedback",
                     *       "goals",
                     *       "learningMoments"
                     *     ] */
                    filterNames?: ("achievements" | "feedback" | "goals" | "learningMoments")[];
                    /**
                     * @description String to match a tag on one or more learning moments.
                     *     Note that tag is only relevant if 'learningMoments' is included in filterNames.
                     *
                     * @example Class Work
                     */
                    tag?: string;
                };
                cursor?: {
                    /** @description The ID of the object specified by discriminator. */
                    id?: number;
                    /**
                     * @description The type of the object.
                     * @example badgeAward
                     * @enum {string}
                     */
                    discriminator?: "evidence" | "badgeAward" | "dueWorkFeedback";
                    /**
                     * Format: date-time
                     * @description The date time of the object in `YYYY-MM-DD hh:mm:ss` format.
                     *
                     * @example 2022-08-30 10:09:09
                     */
                    date?: string;
                };
            };
            header?: never;
            path: {
                /** @description The ID of the user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["evidence-list"];
            default: components["responses"]["problem"];
        };
    };
    "pastoral.postRecordInsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["pastoral-item"];
        responses: {
            /** @description Successfully created a pastoral record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pastoral-item"];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "pastoral.patchRecordUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["pastoral-partial-item"];
        responses: {
            /** @description Successfully updated a pastoral record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pastoral-partial-item"];
                };
            };
            default: components["responses"]["problem"];
        };
    };
    "curriculumApiUsage.getNodeUsage": {
        parameters: {
            query?: {
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["curriculumNodeUsage-list"];
            default: components["responses"]["problem"];
        };
    };
    searchCourses: {
        parameters: {
            query?: {
                /** @description Will do a fuzzy match on the `course` name. **_You may only define either query or folder at a time._**
                 *      */
                query?: string;
                /** @description Passing folder ID will return related courses as suggestions. If the folder contains curriculum code(s), the
                 *     suggestions will return a list of other courses that fulfils the same curriculum code(s).
                 *     **_You may only define either query or folder at a time._**
                 *      */
                folder?: number;
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["course-list"];
            default: components["responses"]["problem"];
        };
    };
    apiSearchGet: {
        parameters: {
            query: {
                /** @description A keyword to search for. */
                keyword: components["parameters"]["keyword"];
                /** @description A JSON-encoded object representing a list of values to search for. */
                filter?: components["parameters"]["filter"];
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["result-list"];
            default: components["responses"]["problem"];
        };
    };
    apiSearchFolderGet: {
        parameters: {
            query: {
                /** @description A keyword to search for. */
                keyword: components["parameters"]["keyword"];
                /** @description A JSON-encoded object representing a list of values to search for. */
                filter?: components["parameters"]["filter"];
                /** @description A generated but decodable pointer to the first record to return.
                 *
                 *     Each endpoint whose data accepts a cursor will return a cursor that
                 *     points to the next page of the result set.
                 *      */
                cursor?: components["parameters"]["cursor"];
                /** @description An option to limit the returned results.
                 *
                 *     Each endpoint whose data accepts a limit will limit
                 *     their results to that number.
                 *
                 *     Note a maximum limit may also apply, depending on the
                 *     specific type of request.
                 *      */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["pageSubResult-list"];
            default: components["responses"]["problem"];
        };
    };
    groupGetUsersInGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of an item to act upon.
                 *
                 *     The type of item that is acted upon is dependent on the endpoint in which
                 *     it is included.
                 *      */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["group-user-list"];
            default: components["responses"]["problem"];
        };
    };
}
